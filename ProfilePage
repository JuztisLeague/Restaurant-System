
package BonAppetit;

import java.awt.Dimension;
import java.awt.Frame;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPasswordField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.Font;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.JTextField;
import java.awt.Color;

public class ProfilePage extends JFrame {
  
	private static final long serialVersionUID = 1L;

	public ProfilePage() {
		setPreferredSize(new Dimension(1920, 1080));
		connect();
		setUndecorated(true);
    	setExtendedState(Frame.MAXIMIZED_BOTH);
    	
        initComponents();
        
        userPhoto();
    }
    
    Connection con;
	PreparedStatement pst;
	ResultSet rs;
	
    
    public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bon_appetit", "root", "");
		}
		
		catch (ClassNotFoundException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Failed to connect to database. ClassNotFoundException: " + ex.getMessage());
	    } catch (SQLException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Failed to connect to database. SQLException: " + ex.getMessage());
	    }
	}

    private void initComponents() {
    	
    	
        jPanel1 = new javax.swing.JPanel();
        jPanel1.setBackground(new Color(31, 34, 50));
        jLabelPassword = new javax.swing.JLabel();
        jLabelPassword.setBounds(841, 599, 266, 36);
        jLabelPassword.setForeground(new Color(255, 255, 255));
        jLabelPassword.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel2 = new javax.swing.JLabel();
        jLabel2.setBounds(5, 16, 1910, 64);
        jLabel2.setForeground(new Color(255, 255, 255));
        jBtnSave = new javax.swing.JButton();
        jBtnSave.setBackground(new Color(64, 64, 64));
        jBtnSave.setForeground(new Color(255, 255, 255));
        jBtnSave.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        jBtnSave.setBounds(923, 988, 92, 36);
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setBounds(945, 516, 58, 36);
        jLabel3.setForeground(new Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(SwingConstants.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(547, 0));

        jLabelPassword.setFont(new Font("Century Gothic", Font.PLAIN, 20)); 
        jLabelPassword.setText("Password");

        jLabel2.setFont(new Font("Century Gothic", Font.BOLD, 48)); 
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Profile");

        jBtnSave.setText("Save");
        jBtnSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                jButtonSaveActionPerformed(e);
            }
        });
        jBtnSave.setVisible(false);

        jLabel3.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        jLabel3.setText("Role");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        
        btnCheckPassword = new JButton("");
        btnCheckPassword.setForeground(new Color(255, 255, 255));
        btnCheckPassword.setBackground(new Color(64, 64, 64));
        btnCheckPassword.setBorder(null);
        btnCheckPassword.setIcon(new ImageIcon(ProfilePage.class.getResource("/images/view.png")));
        btnCheckPassword.setBounds(1025, 646, 76, 36);
        btnCheckPassword.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusGained(FocusEvent e) {
        		passwordField_CurrentPass.setEchoChar((char)0);
        	}
        	@Override
        	public void focusLost(FocusEvent e) {
        		passwordField_CurrentPass.setEchoChar('\u25cf');
        	}
        });
        btnCheckPassword.setVisible(false);
        btnCheckPassword.setFont(new Font("Tahoma", Font.PLAIN, 11));
        
        btnBack = new JButton("");
        btnBack.setBounds(10, 16, 64, 64);
        btnBack.setBackground(new Color(31, 34, 50));
        btnBack.setMinimumSize(new Dimension(64, 64));
        btnBack.setMaximumSize(new Dimension(64, 64));
        btnBack.setIcon(new ImageIcon(ProfilePage.class.getResource("/images/left-arrow.png")));
        btnBack.setPreferredSize(new Dimension(64, 64));
        btnBack.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jBtnBackActionPerformed(e);
        		
        	}
        });
        
        jButtonClose = new JButton("");
        jButtonClose.setBounds(1846, 11, 64, 64);
        jButtonClose.setBackground(new Color(31, 34, 50));
        jButtonClose.setIcon(new ImageIcon(ProfilePage.class.getResource("/images/cancel.png")));
        jButtonClose.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		System.exit(0);
        	}
        });
        jPanel1.setLayout(null);
        jButtonClose.setFont(new Font("Tahoma", Font.PLAIN, 18));
        jButtonClose.setFocusable(false);
        jPanel1.add(jButtonClose);
        btnBack.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnBack.setFocusable(false);
        jPanel1.add(btnBack);
        jPanel1.add(btnCheckPassword);
        jPanel1.add(jLabel2);
        jPanel1.add(jLabel3);
        jPanel1.add(jBtnSave);
        jPanel1.add(jLabelPassword);
        jPanel1.setLayout(null);
        
        lblUserPhoto = new JLabel("USER PHOTO");
        lblUserPhoto.setBounds(796, 113, 350, 350);
        lblUserPhoto.setHorizontalAlignment(SwingConstants.CENTER);
        jPanel1.add(lblUserPhoto);
        
        btnEditPassword = new JButton("Edit Password");
        btnEditPassword.setForeground(new Color(255, 255, 255));
        btnEditPassword.setBackground(new Color(64, 64, 64));
        btnEditPassword.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnEditPassword.setBounds(893, 698, 158, 33);
        btnEditPassword.setBorder(new SoftBevelBorder(BevelBorder.LOWERED, null, null, null, null));
        btnEditPassword.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jBtnEditPasswordActionPerformed();
        	}
        });
        jPanel1.add(btnEditPassword);
        
        passwordField_CurrentPass = new JPasswordField(20);
        passwordField_CurrentPass.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        passwordField_CurrentPass.setBounds(841, 641, 266, 46);
        passwordField_CurrentPass.setBackground(new Color(255, 255, 255));
        passwordField_CurrentPass.setFocusable(false);
        jPanel1.add(passwordField_CurrentPass);
        
        passwordField_NewPass = new JPasswordField(20);
        passwordField_NewPass.setBounds(841, 835, 266, 36);
        jPanel1.add(passwordField_NewPass);
        passwordField_NewPass.setVisible(false);
        
        passwordField_ConfirmPass = new JPasswordField(20);
        passwordField_ConfirmPass.setBounds(841, 923, 266, 36);
        jPanel1.add(passwordField_ConfirmPass);
        passwordField_ConfirmPass.setVisible(false);
        
        
        lblNewPassword = new JLabel();
        lblNewPassword.setBounds(841, 799, 266, 36);
        lblNewPassword.setHorizontalAlignment(SwingConstants.CENTER);
        lblNewPassword.setText("New Password");
        lblNewPassword.setForeground(new Color(255, 255, 255));
        jPanel1.add(lblNewPassword);
        lblNewPassword.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblNewPassword.setVisible(false);
        
        lblConfirmPassword = new JLabel();
        lblConfirmPassword.setBounds(841, 883, 266, 36);
        lblConfirmPassword.setHorizontalAlignment(SwingConstants.CENTER);
        lblConfirmPassword.setText("Confirm Password");
        lblConfirmPassword.setForeground(new Color(255, 255, 255));
        lblConfirmPassword.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        jPanel1.add(lblConfirmPassword);
        
        txtRole = new JTextField();
        txtRole.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        txtRole.setBounds(841, 552, 266, 46);
        txtRole.setText("Sample");
        jPanel1.add(txtRole);
        txtRole.setColumns(10);
        txtRole.setFocusable(false);
        
        btnCancel = new JButton("Cancel");
        btnCancel.setForeground(new Color(255, 255, 255));
        btnCancel.setBackground(new Color(64, 64, 64));
        btnCancel.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnCancel.setBounds(893, 741, 158, 36);
        btnCancel.setVisible(false);
        btnCancel.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jBtnCancelActionPerformed();
        	}
        });
        jPanel1.add(btnCancel);
        lblConfirmPassword.setVisible(false);
        btnCancel.setBorder(new SoftBevelBorder(BevelBorder.LOWERED, null, null, null, null));
        
        
        
        dataIndicator();
        

        
        pack();
    }        

    
    private void dataIndicator() {
    	
    	try {
    		
    		int id = PersonnelLogin.storedPersonnelID();
    		System.out.print(id);
			pst = con.prepareStatement("select * from accounts where id = ?");
			pst.setString(1, Integer.toString(id));
			rs = pst.executeQuery();
			 
			 if (rs.next() == true) {
				 
				txtRole.setText(rs.getString("role"));
				passwordField_CurrentPass.setText(rs.getString("password"));
			 }
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
    }
    
    

    
    
    private void jButtonSaveActionPerformed(ActionEvent e) {                                         
       
        try {
        	
        	
        	
        	passwordConfirm = passwordField_ConfirmPass.getPassword();
        	
        	if(passwordCurrentChecker()) {
        		
        		if (passwordNewChecker()) {
        			int id = PersonnelLogin.storedPersonnelID();
        			pst = con.prepareStatement("update accounts set password = ? where id = ?");
        			pst.setString(1, String.valueOf(passwordConfirm));
        			pst.setString(2, Integer.toString(id));
        			pst.executeUpdate();
        					
        			JOptionPane.showMessageDialog(this, "Successfully Changed", "PasswordChange", JOptionPane.OK_CANCEL_OPTION);
        		}
        			
        	}
        	
        	else {
        		JOptionPane.showMessageDialog(this, "Error", "PasswordChange", JOptionPane.OK_CANCEL_OPTION);
        	}
        	jBtnCancelActionPerformed();
				 
			
   				 
        } catch (SQLException el) {
        	el.printStackTrace();
        }

    }
    
    private boolean passwordCurrentChecker() {
    	
    	try {
    		
    		int id = PersonnelLogin.storedPersonnelID();
    		System.out.print(id);
			pst = con.prepareStatement("select password from accounts where id = ?");
			pst.setString(1, Integer.toString(id));
			rs = pst.executeQuery();
			
			passwordCorrect = rs.getString(1).toCharArray();
			passwordCurrent = passwordField_CurrentPass.getPassword();
			//passwordNew = passwordField_NewPass.getPassword();
			
			if (passwordCurrent.length != passwordCorrect.length){
				return false;
				
			}
			
			for (int i = 0; i < passwordCorrect.length; i++) {
				
				if (passwordCurrent[i] != passwordCorrect[i] ) {
					return false;
				}
				
			}
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
    	return true;
    	
    	
    }
    
    
    private boolean passwordNewChecker() {
    	
    		
    		int id = PersonnelLogin.storedPersonnelID();
    		System.out.print(id);
    		
    		passwordNew = passwordField_NewPass.getPassword();
    		passwordConfirm = passwordField_ConfirmPass.getPassword();
			
			if (passwordNew.length != passwordConfirm.length){
				return false;
				
			}
			
			for (int i = 0; i < passwordConfirm.length; i++) {
				
				if (passwordConfirm[i] != passwordNew[i] ) {
					return false;
				}
				
			}
    	
		return true;
    	
    }
    
    public void jBtnEditPasswordActionPerformed() {
    	
    	passwordField_CurrentPass.setEditable(true);
    	passwordField_CurrentPass.setFocusable(true);
    	passwordField_CurrentPass.requestFocus();
    	
    	jLabelPassword.setText("Current Password");
    	lblNewPassword.setVisible(true);
    	lblConfirmPassword.setVisible(true);
    	passwordField_NewPass.setVisible(true);
    	passwordField_ConfirmPass.setVisible(true);
    	passwordField_CurrentPass.setText("");
    	jBtnSave.setVisible(true);
    	btnCheckPassword.setVisible(true);
    	btnCancel.setVisible(true);
    	
    	
    	
    	
    	
    }
    
    public void jBtnCancelActionPerformed() {
    	lblNewPassword.setVisible(false);
    	lblConfirmPassword.setVisible(false);
    	passwordField_NewPass.setVisible(false);
    	passwordField_ConfirmPass.setVisible(false);
    	
    	jBtnSave.setVisible(false);
    	btnCheckPassword.setVisible(false);
    	
    	passwordField_CurrentPass.setEditable(false);
    	passwordField_CurrentPass.setFocusable(false);
    	
    	jLabelPassword.setText("Password");
    	
    	dataIndicator();
    	
    	btnCancel.setVisible(false);
    }
    
    
    private void jBtnBackActionPerformed(ActionEvent e) {        
    	
    	switch(PersonnelLogin.storedPersonnelID()) {
    	case 1:{
    		OptionsAdmin optionsAdmin = new OptionsAdmin();
    		optionsAdmin.setVisible(true);
            this.dispose();
    		break;
    	}
    	case 2:{
    		OptionsChef optionsChef = new OptionsChef();
    		optionsChef.setVisible(true);
            this.dispose();
    		break;
    	}
    	case 3:{
    		OptionsCashier optionsCashier = new OptionsCashier();
    		optionsCashier.setVisible(true);
            this.dispose();
    		break;
    	}
    		
    		
    	}
    	
    	
        
        
       
   }   
  
    
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfilePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfilePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfilePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfilePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProfilePage().setVisible(true);
            }
        });
    }
    
    private void userPhoto() {
    	
    	switch (PersonnelLogin.storedPersonnelID()) {
    	case 1:{
    		lblUserPhoto.setIcon(new ImageIcon(OrderNumbersDiner.class.getResource("/images/Mar.png")));
    		
    		break;
    	}
    	case 2:{
    		lblUserPhoto.setIcon(new ImageIcon(OrderNumbersDiner.class.getResource("/images/Von.png")));
    		
    		break;
    	}
    	case 3:{
    		lblUserPhoto.setIcon(new ImageIcon(OrderNumbersDiner.class.getResource("/images/Franz.png")));
    		
    		break;
    	}
    	}
    	
    	lblUserPhoto.setText("");
    }
    
    private JLabel lblNewPassword;
	private JLabel lblConfirmPassword;
	private JLabel lblUserPhoto;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private JButton btnEditPassword;
    private JPasswordField passwordField_CurrentPass;
    private JButton btnCheckPassword;
    private JPasswordField passwordField_NewPass;
    private JPasswordField passwordField_ConfirmPass;
    private static JTextField txtRole;
    private char[] passwordConfirm;
    private char[] passwordCorrect;
    private char[] passwordNew;
    private char[] passwordCurrent;
    private JButton btnCancel;
    private JButton btnBack;
    private JButton jButtonClose;
}
