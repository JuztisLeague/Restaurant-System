package BonAppetit;
import java.awt.Frame;
import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import java.awt.event.ActionListener;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import javax.swing.JPasswordField;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.SwingConstants;




public class PersonnelLogin extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	
	
	SignInPage signInPage = new SignInPage();
    public PersonnelLogin(){
    	
    	
    	setExtendedState(Frame.MAXIMIZED_BOTH);
    	setUndecorated(true);
    	connect();
        initComponents();
    }
    
    Connection con;
	PreparedStatement pst;
	ResultSet rs;


	private static OptionsCashier optionsCashier;
	private static OptionsAdmin optionsAdmin;
	private static OptionsChef optionsChef;

	public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bon_appetit", "root", "");
		}
		
		catch (ClassNotFoundException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Failed to connect to database. ClassNotFoundException: " + ex.getMessage());
	    } catch (SQLException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Failed to connect to database. SQLException: " + ex.getMessage());
	    }
	}

   
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel5.setOpaque(false);
        jPanel5.setBounds(10, 102, 1900, 271);
        jPanel5.setFocusable(false);
        jLabel2 = new javax.swing.JLabel();
        jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel2.setForeground(Color.WHITE);
        jLabel2.setFocusable(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        jPanel5.setPreferredSize(new java.awt.Dimension(435, 100));

        jLabel2.setFont(new Font("Century Gothic", Font.BOLD | Font.ITALIC, 60));
        jLabel2.setText("Welcome To Bon Appettit");
        //jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setForeground(Color.WHITE);
        jLabel1.setFocusable(false);
        
                jLabel1.setFont(new Font("Century Gothic", Font.BOLD | Font.ITALIC, 30));
                jLabel1.setText("Bonjour , to  which royalty is keen to have my service?");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5Layout.setHorizontalGroup(
        	jPanel5Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(Alignment.LEADING, jPanel5Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel5Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 1880, Short.MAX_VALUE)
        				.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 415, Short.MAX_VALUE))
        			.addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
        	jPanel5Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel5Layout.createSequentialGroup()
        			.addGap(33)
        			.addComponent(jLabel2)
        			.addGap(18)
        			.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel5.setLayout(jPanel5Layout);
        
        btnBack = new JButton("");
        btnBack.setBackground(new Color(64, 64, 64));
        btnBack.setIcon(new ImageIcon(PersonnelLogin.class.getResource("/images/left-arrow.png")));
        btnBack.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnBack.setBounds(10, 11, 64, 64);
        btnBack.setFocusable(false);
        btnBack.addActionListener(new ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().setLayout(null);
        
        btnClose = new JButton("");
        btnClose.setOpaque(false);
        btnClose.setBackground(new Color(64, 64, 64));
        btnClose.setIcon(new ImageIcon(PersonnelLogin.class.getResource("/images/cancel.png")));
        btnClose.setFocusable(false);
        btnClose.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		System.exit(0);
        	}
        });
        btnClose.setFont(new Font("Tahoma", Font.PLAIN, 18));
        btnClose.setBounds(1846, 11, 64, 64);
        getContentPane().add(btnClose);
        getContentPane().add(jPanel5);
        getContentPane().add(btnBack);
        
        JPanel panel = new JPanel();
        panel.setOpaque(false);
        panel.setBounds(10, 384, 1900, 346);
        getContentPane().add(panel);
        panel.setLayout(null);
        
        lblRole = new JLabel("Role");
        lblRole.setHorizontalAlignment(SwingConstants.CENTER);
        lblRole.setFont(new Font("Century Gothic", Font.BOLD | Font.ITALIC, 30));
        lblRole.setForeground(new Color(255, 255, 255));
        lblRole.setBounds(10, 11, 1880, 35);
        panel.add(lblRole);
        
        lblPassword = new JLabel("Password");
        lblPassword.setHorizontalAlignment(SwingConstants.CENTER);
        lblPassword.setFont(new Font("Century Gothic", Font.BOLD | Font.ITALIC, 30));
        lblPassword.setForeground(Color.WHITE);
        lblPassword.setBounds(10, 138, 1880, 29);
        panel.add(lblPassword);
        
        textRole = new JTextField();
        textRole.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        textRole.setBounds(855, 66, 183, 42);
        panel.add(textRole);
        textRole.setColumns(10);
        
        JButton btnNewButton_1 = new JButton("Login");
        btnNewButton_1.setForeground(new Color(255, 255, 255));
        btnNewButton_1.setBackground(new Color(64, 64, 64));
        btnNewButton_1.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnNewButton_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jLoginButtonActionPerformed(e);
        	}
        });
        btnNewButton_1.setBounds(842, 279, 101, 35);
        panel.add(btnNewButton_1);
        
        btnNewButton = new JButton("Clear");
        btnNewButton.setForeground(new Color(255, 255, 255));
        btnNewButton.setBackground(new Color(64, 64, 64));
        btnNewButton.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnNewButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jClearButtonActionPerformed(e);
        		
        	}
        });
        btnNewButton.setBounds(953, 279, 101, 35);
        panel.add(btnNewButton);
        
        passwordField = new JPasswordField();
        passwordField.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        passwordField.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent e) {
        		
        		jLoginButtionKeyPressed(e);
        	}
        });
        passwordField.setBounds(855, 196, 183, 42);
        panel.add(passwordField);
        
        lblBackground = new JLabel("");
        lblBackground.setOpaque(true);
        lblBackground.setIcon(new ImageIcon(PersonnelLogin.class.getResource("/images/mainBG.png")));
        lblBackground.setBounds(0, 0, 1920, 1080);
        getContentPane().add(lblBackground);

        pack();
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        SignInPage signInPage = new SignInPage();
        signInPage.setVisible(true);
        this.dispose();
       
   }     

    public static void main(String args[]) {
    	
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonnelLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonnelLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonnelLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonnelLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        SwingUtilities.invokeLater(new Runnable() {

			public void run() {
                PersonnelLogin personnelLogin = new PersonnelLogin();
                personnelLogin.setVisible(false);
            }
        });
    }
    
    private void jLoginButtionKeyPressed(KeyEvent e) {
    	
    	if(e.getKeyCode() == KeyEvent.VK_ENTER) {
    		String role =  textRole.getText();
            String password = passwordField.getText();
            
           try {
        	   pst = con.prepareStatement("SELECT * FROM accounts WHERE role = ?");
               pst.setString(1, role);
               ResultSet rs = pst.executeQuery();
               

               	if (rs.next()) {
            	   String storedRole = rs.getString("role");
            	   String storedPassword = rs.getString("password");
            	   
            
            	if (password.equals(storedPassword)) {
            		JOptionPane.showMessageDialog(this, "Login successful!");
                switch (storedRole) {
                    case "Chef":
                        optionsChef = new OptionsChef();
                        optionsChef.setVisible(true);
                        
                        if (optionsChef == null) {
                        	optionsChef = new OptionsChef();
                        }
                        optionsChef.setVisible(true);
                        dispose(); 
                        passID = 2;
                        break;
                    case "Admin":
                        if (optionsAdmin == null) {
                        	optionsAdmin = new OptionsAdmin();
                        }
                        optionsAdmin.setVisible(true);
                        dispose(); 
                        passID = 1;
                        
                        break;
                    case "Cashier":
                    	
                    	if (optionsCashier == null) {
                        	optionsCashier = new OptionsCashier();
                        }
                        optionsCashier.setVisible(true);
                        dispose(); 
                        passID = 3;
                        
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Invalid user role.", "Error", JOptionPane.ERROR_MESSAGE);
                	}
                	this.dispose(); 
                	
                	
            	} else {
            		JOptionPane.showMessageDialog(this, "Incorrect password. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            	}
               	} else {
               		JOptionPane.showMessageDialog(this, "Username not found. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
               	}

               	
        } catch (SQLException el) {
        	JOptionPane.showMessageDialog(this, "Error connecting to database: " + el.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        	el.printStackTrace();
        	}
    	   }
    	
    	System.out.print(Integer.toString(storedPersonnelID()));
    	
    }
    
    public static int storedPersonnelID() {
    	
    	return passID;
    }
    
    
    private void jLoginButtonActionPerformed(ActionEvent e) {                                         
    	String role =  textRole.getText();
        String password = passwordField.getText();
        
       try {
    	   pst = con.prepareStatement("SELECT * FROM accounts WHERE role = ?");
           pst.setString(1, role);
           ResultSet rs = pst.executeQuery();
           

           	if (rs.next()) {
        	   String storedRole = rs.getString("role");
        	   String storedPassword = rs.getString("password");
        	   
        
        	if (password.equals(storedPassword)) {
        		JOptionPane.showMessageDialog(this, "Login successful!");
            switch (storedRole) {
                case "Chef":
                    OptionsChef optionsChef = new OptionsChef();
                    optionsChef.setVisible(true);
                    passID = 2;
                    break;
                case "Admin":
                    OptionsAdmin optionsAdmin = new OptionsAdmin();
                    optionsAdmin.setVisible(true);
                    passID = 1;
                    
                    
                    break;
                case "Cashier":
                	OptionsCashier optionsCashier = new OptionsCashier();
                    optionsCashier.setVisible(true);
                    passID = 3;
                    
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Invalid user role.", "Error", JOptionPane.ERROR_MESSAGE);
            	}
            	this.dispose(); 
            	
            	
        	} else {
        		JOptionPane.showMessageDialog(this, "Incorrect password. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        	}
           	} else {
           		JOptionPane.showMessageDialog(this, "Username not found. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
           	}

           	
    } catch (SQLException el) {
    	JOptionPane.showMessageDialog(this, "Error connecting to database: " + el.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    	el.printStackTrace();
    	}
    }
    
    
    public void jClearButtonActionPerformed(ActionEvent e) {
    	
    	textRole.setText("");
    	passwordField.setText("");
    	textRole.requestFocus();
    	
    }
    
    
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel jPanel5;
    private JButton btnBack;
    private JLabel lblRole;
    private JLabel lblBackground;
    private JLabel lblPassword;
    private JTextField textRole;
    private JButton btnClose;
    private JButton btnNewButton;
    private JPasswordField passwordField;
    private static int passID;
}
