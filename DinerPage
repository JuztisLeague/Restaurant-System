package BonAppetit;

import java.util.Random;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Dimension;
import javax.swing.plaf.basic.BasicButtonUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import java.awt.Rectangle;
import java.awt.Font;
import java.awt.Color;

import javax.swing.ImageIcon;
import javax.swing.JButton;

import java.awt.FlowLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Component;
import java.awt.event.ActionListener;

import java.awt.event.ActionEvent;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;

public class DinerPage extends javax.swing.JFrame {
	
	
	
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

    /**
     * Creates new form CustomerPage
     */
    public DinerPage() {
        getContentPane().setBackground(new Color(21, 25, 28));
        setPreferredSize(new Dimension(1920, 1080));
        setExtendedState(Frame.MAXIMIZED_BOTH);
        setUndecorated(true);
        connect();

        initComponents();

        JButton[] btns = { jButtonAppetizers, jButtonEntree, jButtonDesserts, jButtonDrinks, jButtonConfirm, jButtonCancel};
        for (JButton btn : btns) {
            btn.setBackground(new Color(21,25,28));
            btn.setUI(new BasicButtonUI());
        }

    }

    

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    
	Connection con;
	PreparedStatement pst;
	ResultSet rs;
	ResultSet countResult;
	private DefaultTableCellRenderer centerRenderer;
	private JTableHeader tableHeader;
	private DefaultTableCellRenderer renderer;
	private JSpinner spinner;
	private JButton btnDeleteRow;
	private JButton btnEditQuantity;
	private Blob imageBlob;
	
	
    public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bon_appetit", "root", "");
		}
		
		catch (ClassNotFoundException ex) {
			
		}
		
		catch (SQLException ex) {
			
		}
	}
    
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        SidePanel1 = new javax.swing.JPanel();
        SidePanel1.setBackground(new Color(21, 25, 28));
        SidePanel1.setBounds(new Rectangle(0, 0, 103, 1080));
        SidePanel2 = new javax.swing.JPanel();
        SidePanel2.setBounds(1436, 0, 484, 1080);
        SidePanel2.setBackground(new Color(21, 25, 28));
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setBounds(45, 11, 387, 67);
        jLabel3.setForeground(new Color(255, 255, 255));
        jButtonConfirm = new javax.swing.JButton();
        jButtonConfirm.setBackground(new Color(0, 0, 0));
        jButtonConfirm.setIcon(new ImageIcon(DinerPage.class.getResource("/images/confirm.png")));
        jButtonConfirm.setAlignmentX(Component.CENTER_ALIGNMENT);
        jButtonConfirm.setPreferredSize(new Dimension(64, 64));
        jButtonConfirm.setBounds(153, 959, 64, 64);
        jButtonConfirm.setFont(new Font("Century Gothic", Font.PLAIN, 10));
        jButtonCancel = new javax.swing.JButton();
        jButtonCancel.setBackground(new Color(0, 0, 0));
        jButtonCancel.setIcon(new ImageIcon(DinerPage.class.getResource("/images/cancel.png")));
        jButtonCancel.setAlignmentX(Component.CENTER_ALIGNMENT);
        jButtonCancel.setBounds(287, 959, 64, 64);
        jButtonCancel.setFont(new Font("Century Gothic", Font.PLAIN, 10));
        jLabelOrderNumber = new javax.swing.JLabel();
        jLabelOrderNumber.setBounds(23, 890, 441, 35);
        jLabelOrderNumber.setForeground(new Color(255, 255, 255));
        MenuHolder = new javax.swing.JPanel();
        MenuHolder.setBounds(109, 0, 1321, 1080);

        jLabel4.setFont(new java.awt.Font("French Script MT", 0, 24)); // NOI18N
        jLabel4.setText("Your Order Number:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new Font("Century Gothic", Font.PLAIN, 45)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Order Summary");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabelOrderNumber.setFont(new Font("Century Gothic", Font.PLAIN, 24)); // NOI18N
        jLabelOrderNumber.setText("Your Order Number:");

        MenuHolder.setBackground(new Color(21, 25, 28));
        MenuHolder.setPreferredSize(new java.awt.Dimension(538, 0));
        
        panelData_1 = new JPanel();
        panelData_1.setBackground(new Color(21, 25, 28));
        panelData_1.setBounds(47, 79, 327, 251);
        
        lblNumber = new JLabel("");
        lblNumber.setBounds(10, 11, 248, 50);
        lblNumber.setForeground(new Color(255, 255, 255));
        lblNumber.setFont(new Font("Tahoma", Font.PLAIN, 20));
        panelData_1.setLayout(null);
        panelData_1.setVisible(false);
        MenuHolder.setLayout(null);
        MenuHolder.add(lblNumber);
        MenuHolder.add(panelData_1);
        
        lblDishPhoto_1 = new JLabel("");
        lblDishPhoto_1.setBounds(10, 22, 140, 95);
        panelData_1.add(lblDishPhoto_1);
        
        lblDishName_1 = new JLabel("New label");
        lblDishName_1.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_1.setForeground(new Color(255, 255, 255));
        lblDishName_1.setBounds(132, 22, 165, 20);
        panelData_1.add(lblDishName_1);
        
        lblPrice_1 = new JLabel("New label");
        lblPrice_1.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_1.setForeground(new Color(255, 255, 255));
        lblPrice_1.setBounds(172, 71, 125, 20);
        panelData_1.add(lblPrice_1);
        
        lblDescription_1 = new JLabel("New label");
        lblDescription_1.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_1.setForeground(new Color(255, 255, 255));
        lblDescription_1.setBounds(10, 119, 307, 50);
        panelData_1.add(lblDescription_1);
        
        //final Object[] row = new Object[4];
        
        btnOrderAdd_1 = new JButton("Add");
        btnOrderAdd_1.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_1.setBorder(null);
        btnOrderAdd_1.setForeground(new Color(255, 255, 255));
        btnOrderAdd_1.setBackground(new Color(21, 25, 28));
        btnOrderAdd_1.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		
        		jAddButtonActionPerformed(e, lblDishName_1,lblPrice_1);
        	
        	}
        });
        btnOrderAdd_1.setBounds(222, 200, 96, 38);
        panelData_1.add(btnOrderAdd_1);
        
        panelData_2 = new JPanel();
        panelData_2.setBackground(new Color(21, 25, 28));
        panelData_2.setBounds(491, 79, 327, 251);
        MenuHolder.add(panelData_2);
        panelData_2.setLayout(null);
        panelData_2.setVisible(false);
        
        lblDishPhoto_2 = new JLabel("");
        lblDishPhoto_2.setBounds(10, 22, 134, 86);
        panelData_2.add(lblDishPhoto_2);
        
        lblDishName_2 = new JLabel("New label");
        lblDishName_2.setForeground(new Color(255, 255, 255));
        lblDishName_2.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_2.setBounds(132, 22, 165, 20);
        panelData_2.add(lblDishName_2);
        
        lblPrice_2 = new JLabel("New label");
        lblPrice_2.setForeground(new Color(255, 255, 255));
        lblPrice_2.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_2.setBounds(172, 71, 125, 20);
        panelData_2.add(lblPrice_2);
        
        lblDescription_2 = new JLabel("New label");
        lblDescription_2.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_2.setForeground(new Color(255, 255, 255));
        lblDescription_2.setBounds(20, 119, 307, 50);
        panelData_2.add(lblDescription_2);
        
        btnOrderAdd_2 = new JButton("Add");
        btnOrderAdd_2.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_2.setBorder(null);
        btnOrderAdd_2.setBackground(new Color(21, 25, 28));
        btnOrderAdd_2.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_2.setForeground(new Color(255, 255, 255));
        btnOrderAdd_2.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_2,lblPrice_2);
        		
        	}
        });
        btnOrderAdd_2.setBounds(222, 200, 96, 38);
        panelData_2.add(btnOrderAdd_2);
        
        panelData_3 = new JPanel();
        panelData_3.setBackground(new Color(21, 25, 28));
        panelData_3.setBounds(933, 79, 327, 251);
        MenuHolder.add(panelData_3);
        panelData_3.setLayout(null);
        panelData_3.setVisible(false);
        
        lblDishPhoto_3 = new JLabel("");
        lblDishPhoto_3.setBounds(10, 22, 134, 86);
        panelData_3.add(lblDishPhoto_3);
        
        lblDishName_3 = new JLabel("New label");
        lblDishName_3.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_3.setForeground(new Color(255, 255, 255));
        lblDishName_3.setBounds(132, 22, 165, 20);
        panelData_3.add(lblDishName_3);
        
        lblPrice_3 = new JLabel("New label");
        lblPrice_3.setForeground(new Color(255, 255, 255));
        lblPrice_3.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_3.setBounds(172, 71, 125, 20);
        panelData_3.add(lblPrice_3);
        
        lblDescription_3 = new JLabel("New label");
        lblDescription_3.setForeground(new Color(255, 255, 255));
        lblDescription_3.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_3.setBounds(20, 119, 307, 50);
        panelData_3.add(lblDescription_3);
        
        btnOrderAdd_3 = new JButton("Add");
        btnOrderAdd_3.setBackground(new Color(21, 25, 28));
        btnOrderAdd_3.setBorder(null);
        btnOrderAdd_3.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_3.setForeground(new Color(255, 255, 255));
        btnOrderAdd_3.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_3.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_3,lblPrice_3);
        	}
        });
        btnOrderAdd_3.setBounds(222, 200, 96, 38);
        panelData_3.add(btnOrderAdd_3);
        
        panelData_4 = new JPanel();
        panelData_4.setBackground(new Color(21, 25, 28));
        panelData_4.setLayout(null);
        panelData_4.setBounds(47, 391, 327, 251);
        MenuHolder.add(panelData_4);
        panelData_4.setVisible(false);
        
        lblDishPhoto_4 = new JLabel("");
        lblDishPhoto_4.setBounds(10, 22, 134, 86);
        panelData_4.add(lblDishPhoto_4);
        
        lblDishName_4 = new JLabel("New label");
        lblDishName_4.setForeground(new Color(255, 255, 255));
        lblDishName_4.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_4.setBounds(132, 22, 165, 20);
        panelData_4.add(lblDishName_4);
        
        lblPrice_4 = new JLabel("New label");
        lblPrice_4.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_4.setForeground(new Color(255, 255, 255));
        lblPrice_4.setBounds(172, 71, 125, 20);
        panelData_4.add(lblPrice_4);
        
        lblDescription_4 = new JLabel("New label");
        lblDescription_4.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_4.setForeground(new Color(255, 255, 255));
        lblDescription_4.setBounds(10, 119, 307, 50);
        panelData_4.add(lblDescription_4);
        
        btnOrderAdd_4 = new JButton("Add");
        btnOrderAdd_4.setBorder(null);
        btnOrderAdd_4.setBackground(new Color(21, 25, 28));
        btnOrderAdd_4.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_4.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_4.setForeground(new Color(255, 255, 255));
        btnOrderAdd_4.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_4,lblPrice_4);
        	}
        });
        btnOrderAdd_4.setBounds(204, 202, 96, 38);
        panelData_4.add(btnOrderAdd_4);
        
        panelData_5 = new JPanel();
        panelData_5.setBackground(new Color(21, 25, 28));
        panelData_5.setLayout(null);
        panelData_5.setBounds(491, 391, 327, 251);
        MenuHolder.add(panelData_5);
        panelData_5.setVisible(false);
        
        lblDishPhoto_5 = new JLabel("");
        lblDishPhoto_5.setBounds(10, 22, 134, 86);
        panelData_5.add(lblDishPhoto_5);
        
        lblDishName_5 = new JLabel("New label");
        lblDishName_5.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_5.setForeground(new Color(255, 255, 255));
        lblDishName_5.setBounds(132, 22, 165, 20);
        panelData_5.add(lblDishName_5);
        
        lblPrice_5 = new JLabel("New label");
        lblPrice_5.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_5.setForeground(new Color(255, 255, 255));
        lblPrice_5.setBounds(172, 71, 125, 20);
        panelData_5.add(lblPrice_5);
        
        lblDescription_5 = new JLabel("New label");
        lblDescription_5.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_5.setForeground(new Color(255, 255, 255));
        lblDescription_5.setBounds(10, 119, 307, 50);
        panelData_5.add(lblDescription_5);
        
        btnOrderAdd_5 = new JButton("Add");
        btnOrderAdd_5.setBorder(null);
        btnOrderAdd_5.setBackground(new Color(21, 25, 28));
        btnOrderAdd_5.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_5.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_5.setForeground(new Color(255, 255, 255));
        btnOrderAdd_5.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_5,lblPrice_5);
        	}
        });
        btnOrderAdd_5.setBounds(204, 202, 96, 38);
        panelData_5.add(btnOrderAdd_5);
        
        panelData_6 = new JPanel();
        panelData_6.setBackground(new Color(21, 25, 28));
        panelData_6.setLayout(null);
        panelData_6.setBounds(933, 391, 327, 251);
        MenuHolder.add(panelData_6);
        panelData_6.setVisible(false);
        
        lblDishPhoto_6 = new JLabel("");
        lblDishPhoto_6.setBounds(10, 22, 134, 86);
        panelData_6.add(lblDishPhoto_6);
        
        lblDishName_6 = new JLabel("New label");
        lblDishName_6.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_6.setForeground(new Color(255, 255, 255));
        lblDishName_6.setBounds(132, 22, 165, 20);
        panelData_6.add(lblDishName_6);
        
        lblPrice_6 = new JLabel("New label");
        lblPrice_6.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_6.setForeground(new Color(255, 255, 255));
        lblPrice_6.setBounds(172, 71, 125, 20);
        panelData_6.add(lblPrice_6);
        
        lblDescription_6 = new JLabel("New label");
        lblDescription_6.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_6.setForeground(new Color(255, 255, 255));
        lblDescription_6.setBounds(10, 119, 307, 50);
        panelData_6.add(lblDescription_6);
        
        btnOrderAdd_6 = new JButton("Add");
        btnOrderAdd_6.setBorder(null);
        btnOrderAdd_6.setBackground(new Color(21, 25, 28));
        btnOrderAdd_6.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_6.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_6.setForeground(new Color(255, 255, 255));
        btnOrderAdd_6.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_6,lblPrice_6);
        	}
        });
        btnOrderAdd_6.setBounds(204, 202, 96, 38);
        panelData_6.add(btnOrderAdd_6);
        
        panelData_7 = new JPanel();
        panelData_7.setBackground(new Color(21, 25, 28));
        panelData_7.setLayout(null);
        panelData_7.setBounds(47, 704, 327, 251);
        MenuHolder.add(panelData_7);
        panelData_7.setVisible(false);
        
        lblDishPhoto_7 = new JLabel("");
        lblDishPhoto_7.setBounds(10, 22, 134, 86);
        panelData_7.add(lblDishPhoto_7);
        
        lblDishName_7 = new JLabel("New label");
        lblDishName_7.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_7.setForeground(new Color(255, 255, 255));
        lblDishName_7.setBounds(132, 22, 165, 20);
        panelData_7.add(lblDishName_7);
        
        lblPrice_7 = new JLabel("New label");
        lblPrice_7.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_7.setForeground(new Color(255, 255, 255));
        lblPrice_7.setBounds(172, 71, 125, 20);
        panelData_7.add(lblPrice_7);
        
        lblDescription_7 = new JLabel("New label");
        lblDescription_7.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_7.setForeground(new Color(255, 255, 255));
        lblDescription_7.setBounds(10, 119, 307, 50);
        panelData_7.add(lblDescription_7);    
        
        btnOrderAdd_7 = new JButton("Add");
        btnOrderAdd_7.setBorder(null);
        btnOrderAdd_7.setBackground(new Color(21, 25, 28));
        btnOrderAdd_7.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_7.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_7.setForeground(new Color(255, 255, 255));
        btnOrderAdd_7.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_7,lblPrice_7);
        	}
        });
        btnOrderAdd_7.setBounds(204, 202, 96, 38);
        panelData_7.add(btnOrderAdd_7);
        
        panelData_8 = new JPanel();
        panelData_8.setBackground(new Color(21, 25, 28));
        panelData_8.setLayout(null);
        panelData_8.setBounds(491, 704, 327, 251);
        MenuHolder.add(panelData_8);
        panelData_8.setVisible(false);
        
        lblDishPhoto_8 = new JLabel("");
        lblDishPhoto_8.setBounds(10, 22, 134, 86);
        panelData_8.add(lblDishPhoto_8);
        
        lblDishName_8 = new JLabel("New label");
        lblDishName_8.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_8.setForeground(new Color(255, 255, 255));
        lblDishName_8.setBounds(132, 22, 165, 20);
        panelData_8.add(lblDishName_8);
        
        lblPrice_8 = new JLabel("New label");
        lblPrice_8.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_8.setForeground(new Color(255, 255, 255));
        lblPrice_8.setBounds(172, 71, 125, 20);
        panelData_8.add(lblPrice_8);
        
        lblDescription_8 = new JLabel("New label");
        lblDescription_8.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_8.setForeground(new Color(255, 255, 255));
        lblDescription_8.setBounds(10, 119, 307, 50);
        panelData_8.add(lblDescription_8);    
        
        btnOrderAdd_8 = new JButton("Add");
        btnOrderAdd_8.setBorder(null);
        btnOrderAdd_8.setBackground(new Color(21, 25, 28));
        btnOrderAdd_8.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_8.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_8.setForeground(new Color(255, 255, 255));
        btnOrderAdd_8.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_8,lblPrice_8);
        	}
        });
        btnOrderAdd_8.setBounds(204, 202, 96, 38);
        panelData_8.add(btnOrderAdd_8);
        
        panelData_9 = new JPanel();
        panelData_9.setBackground(new Color(21, 25, 28));
        panelData_9.setLayout(null);
        panelData_9.setBounds(933, 704, 327, 251);
        MenuHolder.add(panelData_9);
        panelData_9.setVisible(false);
        
        lblDishPhoto_9 = new JLabel("");
        lblDishPhoto_9.setBounds(10, 22, 134, 86);
        panelData_9.add(lblDishPhoto_9);
        
        lblDishName_9 = new JLabel("New label");
        lblDishName_9.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblDishName_9.setForeground(new Color(255, 255, 255));
        lblDishName_9.setBounds(132, 22, 165, 20);
        panelData_9.add(lblDishName_9);
        
        lblPrice_9 = new JLabel("New label");
        lblPrice_9.setFont(new Font("Century Gothic", Font.PLAIN, 15));
        lblPrice_9.setForeground(new Color(255, 255, 255));
        lblPrice_9.setBounds(172, 71, 125, 20);
        panelData_9.add(lblPrice_9);
        
        lblDescription_9 = new JLabel("New label");
        lblDescription_9.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_9.setForeground(new Color(255, 255, 255));
        lblDescription_9.setBounds(10, 119, 307, 50);
        panelData_9.add(lblDescription_9);
        
        btnOrderAdd_9 = new JButton("Add");
        btnOrderAdd_9.setBorder(null);
        btnOrderAdd_9.setBackground(new Color(21, 25, 28));
        btnOrderAdd_9.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_9.setFont(new Font("Century Gothic", Font.PLAIN, 11));
        btnOrderAdd_9.setForeground(new Color(255, 255, 255));
        btnOrderAdd_9.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_9,lblPrice_9);
        	}
        });
        btnOrderAdd_9.setBounds(204, 202, 96, 38);
        panelData_9.add(btnOrderAdd_9);
        
        lblNewLabel_2 = new JLabel("");
        lblNewLabel_2.setForeground(new Color(255, 255, 255));
        lblNewLabel_2.setFont(new Font("Tahoma", Font.PLAIN, 18));
        lblNewLabel_2.setBounds(175, 33, 63, 28);
        MenuHolder.add(lblNewLabel_2);
        SidePanel2.setLayout(null);
        SidePanel2.add(jButtonConfirm);
        SidePanel2.add(jButtonCancel);
        SidePanel2.add(jLabelOrderNumber);
        SidePanel2.add(jLabel3);
        FlowLayout fl_sidePanel1 = new FlowLayout(FlowLayout.CENTER, 10, 50);
        SidePanel1.setLayout(fl_sidePanel1);
        
        lblNewLabel = new JLabel("MENU");
        lblNewLabel.setForeground(new Color(192, 192, 192));
        lblNewLabel.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        SidePanel1.add(lblNewLabel);

        jButtonAppetizers = new JButton("");
        jButtonAppetizers.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAppetizerButtonActionPerformed(e);
        	}
        });
        jButtonAppetizers.setBackground(new Color(0, 0, 0));
        jButtonAppetizers.setIcon(new ImageIcon(DinerPage.class.getResource("/images/nachos.png")));
        jButtonAppetizers.setPreferredSize(new Dimension(64, 64));
        jButtonAppetizers.setBounds(new Rectangle(0, 0, 100, 100));
        SidePanel1.add(jButtonAppetizers);

        jButtonEntree = new JButton("");
        jButtonEntree.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jEntreeButtonActionPerformed(e);
        	}
        });
        jButtonEntree.setBackground(new Color(0, 0, 0));
        jButtonEntree.setIcon(new ImageIcon(DinerPage.class.getResource("/images/Entree.png")));
        jButtonEntree.setPreferredSize(new Dimension(64, 64));
        jButtonEntree.setBounds(new Rectangle(0, 0, 64, 64));
        SidePanel1.add(jButtonEntree);

        jButtonDesserts = new JButton("");
        jButtonDesserts.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jDessertButtonActionPerformed(e);
        	}
        });
        jButtonDesserts.setBackground(new Color(0, 0, 0));
        jButtonDesserts.setIcon(new ImageIcon(DinerPage.class.getResource("/images/dessert.png")));
        jButtonDesserts.setPreferredSize(new Dimension(64, 64));
        jButtonDesserts.setBounds(new Rectangle(0, 0, 64, 64));
        SidePanel1.add(jButtonDesserts);

        jButtonDrinks = new JButton("");
        jButtonDrinks.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jDrinksButtonActionPerformed(e);
        	}
        });
        getContentPane().setLayout(null);
        jButtonDrinks.setBackground(new Color(0, 0, 0));
        jButtonDrinks.setIcon(new ImageIcon(DinerPage.class.getResource("/images/drinks.png")));
        jButtonDrinks.setPreferredSize(new Dimension(64, 64));
        jButtonDrinks.setBounds(new Rectangle(0, 0, 64, 64));
        SidePanel1.add(jButtonDrinks);
        getContentPane().add(SidePanel1);
        
        jButtonDrinks_1 = new JButton("");
        jButtonDrinks_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jButtonBackActionPerformed(e);
        	}
        });
        jButtonDrinks_1.setIcon(new ImageIcon(DinerPage.class.getResource("/images/left-arrow.png")));
        jButtonDrinks_1.setPreferredSize(new Dimension(64, 64));
        jButtonDrinks_1.setBounds(new Rectangle(0, 0, 64, 64));
        jButtonDrinks_1.setBackground(Color.BLACK);
        SidePanel1.add(jButtonDrinks_1);
        getContentPane().add(MenuHolder);
        getContentPane().add(SidePanel2);
        
        	
        
        
        lblTotalPrice = new JLabel();
        lblTotalPrice.setText("Total Price:");
        lblTotalPrice.setForeground(Color.WHITE);
        lblTotalPrice.setFont(new Font("Century Gothic", Font.PLAIN, 24));
        lblTotalPrice.setBounds(134, 796, 317, 35);
        SidePanel2.add(lblTotalPrice);
        
        JLabel lblBackground = new JLabel("");
        lblBackground.setIcon(new ImageIcon(DinerPage.class.getResource("/images/mainBG.png")));
        lblBackground.setBounds(0, 0, 1920, 1080);
        getContentPane().add(lblBackground);

        
        scrollPane = new JScrollPane();
    	scrollPane.setEnabled(false);
    	scrollPane.getViewport().setBackground(new Color(64, 64, 64)); // Set the background color of the viewport
    	scrollPane.setBounds(10, 77, 464, 549);
    	SidePanel2.add(scrollPane);
    	
    	
		table = new JTable();
		table.setBackground(new Color(64, 64, 64)); // Set the table background color to dark grey
		table.setForeground(Color.WHITE);
		table.setName("");
		model = new DefaultTableModel();
		Object[] column = {"ID","Name","Price","Quantity"};
		model.setColumnIdentifiers(column);
		table.setModel(model);
		table.setRowHeight(30);
		scrollPane.setViewportView(table);

		// Adjusting column widths
		table.getColumnModel().getColumn(0).setPreferredWidth(50); // Code - for 6 characters
		table.getColumnModel().getColumn(1).setPreferredWidth(50); // ID - for 4 characters
		table.getColumnModel().getColumn(2).setPreferredWidth(50); // Name - for longer text
		table.getColumnModel().getColumn(3).setPreferredWidth(50); // Status - for longer text

		// Center align content in specific columns
		centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
		table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Code
		table.getColumnModel().getColumn(1).setCellRenderer(centerRenderer); // ID
		table.getColumnModel().getColumn(2).setCellRenderer(centerRenderer); // Price
		table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer); // Quantity

		tableHeader = table.getTableHeader();
		tableHeader.setFont(new Font("Century Gothic", Font.BOLD, 18));
		tableHeader.setBackground(new Color(64, 64, 64)); // Set the background color of the table header to dark grey

		// Center align column headers
		renderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
		renderer.setHorizontalAlignment(JLabel.CENTER);

		// Set font and size for table cells
		table.setFont(new Font("Century Gothic", Font.PLAIN, 12));

		table.setOpaque(true);
		
		
		
		
		btnEditQuantity = new JButton("Edit Quantity");
		btnEditQuantity.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				editQuantity();
			}
		});
		btnEditQuantity.setBounds(23, 712, 125, 35);
		SidePanel2.add(btnEditQuantity);
		
		btnDeleteRow = new JButton("Delete Order");
		btnDeleteRow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteSelectedRow();
			}
		});
		btnDeleteRow.setBounds(295, 712, 125, 35);
		SidePanel2.add(btnDeleteRow);
		
		spinner = new JSpinner();
		spinner.setBounds(170, 712, 72, 35);

        pack();
        
        
        
        
        
    }// </editor-fold>

   

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {
        if (table != null && table.getRowCount() > 0 && table.getColumnCount() > 1) { // Check if the table model is not null and has rows and columns (excluding identifiers)
            if (generatedcode == 0) {
                generatedcode = generateRandomCode();
            }
            jLabelOrderNumber.setText("Your Order Number: " + generatedcode);
        } else {
            JOptionPane.showMessageDialog(this, "Add a dish first", "Warning", JOptionPane.WARNING_MESSAGE); // Show a message dialog indicating that a dish should be added first
        }

        // Set the visibility of all labels and panels of the menu printer to false
        panelData_1.setVisible(false);
        panelData_2.setVisible(false);
        panelData_3.setVisible(false);
        panelData_4.setVisible(false);
        panelData_5.setVisible(false);
        panelData_6.setVisible(false);
        panelData_7.setVisible(false);
        panelData_8.setVisible(false);
        panelData_9.setVisible(false);
    }
    
    public void addButtonsVisibility() {
    	
    }



    
    private int generateRandomCode() {
        Random random = new Random();
        
        if (pressedCount == 0) {
        	code = random.nextInt(90000) + 10000;
        }
        
        return code; // Gdeenerates a random 5-digit number
       
    }
    
    
    
    //private int codeChecker

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
    	
    	SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new OptionsDiner().setVisible(false); 
            }
        });
    	
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DinerPage().setVisible(true);
            }
        });
    }
    
    public void jAppetizerButtonActionPerformed(ActionEvent e) {
    	
    	refreshPrint();
    	menuPrinter("appetizer");
    }
    public void jEntreeButtonActionPerformed(ActionEvent e) {
    	
    	refreshPrint();
    	menuPrinter("entree");
    }
    public void jDessertButtonActionPerformed(ActionEvent e) {
	
    	refreshPrint();
    	menuPrinter("dessert");
    }
    public void jDrinksButtonActionPerformed(ActionEvent e) {
	
    	refreshPrint();
    	menuPrinter("drinks");
	}
    
    public void menuPrinter(String option) {
    	String dishName,description,price;
    	int totalRows = 0;
    	try {
	    	pst = con.prepareStatement("SELECT COUNT(*) FROM " + option);
	        countResult = pst.executeQuery();
	        countResult.next();
	        totalRows = countResult.getInt(1); // Total number of rows in the ResultSet
	        String total  = Integer.toString(totalRows);
	        // Set the limit to the total number of rows
	        int limit = totalRows;
	        
	        int key = OrderNumbersDiner.menuKey();
	    	
	    	if (key == 1) {
	    		btnOrderAdd_1.setEnabled(false);
	    		btnOrderAdd_2.setEnabled(false);
	    		btnOrderAdd_3.setEnabled(false);
	    		btnOrderAdd_4.setEnabled(false);
	    		btnOrderAdd_5.setEnabled(false);
	    		btnOrderAdd_6.setEnabled(false);
	    		btnOrderAdd_7.setEnabled(false);
	    		btnOrderAdd_8.setEnabled(false);
	    		btnOrderAdd_9.setEnabled(false);
	    	}
	        
	        
	        lblNumber.setText(total);
	        pst = con.prepareStatement("select dish_name,description,price, image, type from " + option);
	        rs = pst.executeQuery();
	        
	        int count = 0;
	        while (rs.next() && count < limit) {
	            dishName = rs.getString("dish_name");
	            description = rs.getString("description");
	            price = rs.getString("price");
	            
	            imageBlob = rs.getBlob("image");
				byte[] imageBytes = imageBlob.getBytes(1, (int) imageBlob.length());
	   	 		ImageIcon imageIcon = new ImageIcon(imageBytes);
	   		 	Image img = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
	            
	            switch (count) {
	                case 0:
	                    lblDishName_1.setText(dishName);
	                    lblDescription_1.setText(description);
	                    lblPrice_1.setText(price);
	                    panelData_1.setVisible(true);
	                    lblDishPhoto_1.setIcon(new ImageIcon(img));
	                    break;
	                case 1:
	                	lblDishName_2.setText(dishName);
	                    lblDescription_2.setText(description);
	                    lblPrice_2.setText(price);
	                    panelData_2.setVisible(true);
	                    lblDishPhoto_2.setIcon(new ImageIcon(img));
	                    break;
	                case 2:
	                	lblDishName_3.setText(dishName);
	                    lblDescription_3.setText(description);
	                    lblPrice_3.setText(price);
	                    panelData_3.setVisible(true);
	                    lblDishPhoto_3.setIcon(new ImageIcon(img));
	                    break;
	                case 3:
	                	lblDishName_4.setText(dishName);
	                    lblDescription_4.setText(description);
	                    lblPrice_4.setText(price);
	                    panelData_4.setVisible(true);
	                    lblDishPhoto_4.setIcon(new ImageIcon(img));
	                    break;
	                case 4:
	                	lblDishName_5.setText(dishName);
	                    lblDescription_5.setText(description);
	                    lblPrice_5.setText(price);
	                    panelData_5.setVisible(true);
	                    lblDishPhoto_5.setIcon(new ImageIcon(img));
	                    break;
	                case 5:
	                	lblDishName_6.setText(dishName);
	                    lblDescription_6.setText(description);
	                    lblPrice_6.setText(price);
	                    panelData_6.setVisible(true);
	                    lblDishPhoto_6.setIcon(new ImageIcon(img));
	                    break;
	                case 6:
	                	lblDishName_7.setText(dishName);
	                    lblDescription_7.setText(description);
	                    lblPrice_7.setText(price);
	                    panelData_7.setVisible(true);
	                    lblDishPhoto_7.setIcon(new ImageIcon(img));
	                    break;
	                case 7:
	                	lblDishName_8.setText(dishName);
	                    lblDescription_8.setText(description);
	                    lblPrice_8.setText(price);
	                    panelData_8.setVisible(true);
	                    lblDishPhoto_8.setIcon(new ImageIcon(img));
	                    break;
	                case 8:
	                	lblDishName_9.setText(dishName);
	                    lblDescription_9.setText(description);
	                    lblPrice_9.setText(price);
	                    panelData_9.setVisible(true);
	                    lblDishPhoto_9.setIcon(new ImageIcon(img));
	                    break;
	            }
	            count++;
	        }
	    } catch (SQLException ex) {
	        ex.printStackTrace();
	    }
    }
    
    public void refreshPrint() {
    	panelData_1.setVisible(false);
    	panelData_2.setVisible(false);
    	panelData_3.setVisible(false);
    	panelData_4.setVisible(false);
    	panelData_5.setVisible(false);
    	panelData_6.setVisible(false);
    	panelData_7.setVisible(false);
    	panelData_8.setVisible(false);
    	panelData_9.setVisible(false);
    	
    }
    
    public String numberIDChecker() {
        return String.valueOf(++lastOrderNumber);
    }
    
    
    public void jAddButtonActionPerformed(ActionEvent e, JLabel dishName, JLabel dishPrice) {
        System.out.println("Add button clicked");
        String name, price, orderNumber, orderCode;
        float priceCurrent;
        
        name = dishName.getText();
        price = dishPrice.getText();
        priceCurrent = Float.parseFloat(dishPrice.getText());
        
        // Create spinner for inputting the number of orders
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1); // Initial value, minimum value, maximum value, step
        JSpinner spinner = new JSpinner(spinnerModel);
        Object[] message = {"Enter the number of orders for " + name + ":", spinner};
        
        int option = JOptionPane.showConfirmDialog(null, message, "Number of Orders", JOptionPane.OK_CANCEL_OPTION);
        
        // Check if the user canceled
        if (option != JOptionPane.OK_OPTION) {
            return; // Exit if canceled
        }
        
        int quantity = (int) spinner.getValue();
        float totalPriceChange = priceCurrent * quantity;
        
        orderNumber = numberIDChecker();
        orderCode = String.valueOf(generateRandomCode());
        
        try {
            // Calculate total price dynamically based on the quantity of each dish in the table model
            float total = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int rowQuantity = Integer.parseInt((String) model.getValueAt(i, 3));
                float rowPrice = Float.parseFloat((String) model.getValueAt(i, 2));
                total += rowQuantity * rowPrice;
            }
            total += totalPriceChange;
            totalPrice = total;
            
            lblTotalPrice.setText("Total Price: " + String.valueOf(totalPrice));
            
            // Add a single row to the table model, with the total amount
            row[0] = orderNumber;
            row[1] = name;
            row[2] = price;
            row[3] = String.valueOf(quantity);
            
            pst = con.prepareStatement("insert into order_cart (order_number, dish_name, price, quantity, order_code, status, remarks, total_price)values(?,?,?,?,?,?,?,?)");
            pst.setString(1, orderNumber);
            pst.setString(2, name);
            pst.setString(3, price);
            pst.setString(4, String.valueOf(quantity));
            pst.setString(5, orderCode);
            pst.setString(6, "pending");
            pst.setString(7, "incomplete");
            pst.setString(8, String.valueOf(totalPrice));
            pst.executeUpdate();
            
            model.addRow(row);
        } catch (SQLException e1) {            
            e1.printStackTrace();
        }
        
        pressedCount++;
    }
    
    
    private void editQuantity() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 0, 50, 1);
            JSpinner spinner = new JSpinner(spinnerModel);
            spinner.setValue(Integer.parseInt((String) table.getValueAt(selectedRow, 3))); // Set spinner value to current quantity
            int result = JOptionPane.showConfirmDialog(null, new Object[]{"Edit Quantity:", spinner}, "Edit Quantity", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                int newQuantity = (int) spinner.getValue();
                table.setValueAt(String.valueOf(newQuantity), selectedRow, 3); // Update quantity in table model as string
                
                // Recalculate total price after updating quantity
                float total = 0;
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    int rowQuantity = Integer.parseInt((String) model.getValueAt(i, 3));
                    float rowPrice = Float.parseFloat((String) model.getValueAt(i, 2));
                    total += rowQuantity * rowPrice;
                }
                lblTotalPrice.setText("Total Price: " + String.valueOf(total));
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }


    // Method to delete selected row
    private void deleteSelectedRow() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            float deletedRowPrice = Float.parseFloat((String) model.getValueAt(selectedRow, 2)); // Price of the deleted dish
            int deletedRowQuantity = Integer.parseInt((String) model.getValueAt(selectedRow, 3)); // Quantity of the deleted dish
            float deletedRowTotalPrice = deletedRowPrice * deletedRowQuantity; // Total price of the deleted dish
            
            model.removeRow(selectedRow);
            
            // Update the ID or row number to be sequential from 1 to the last row count
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(i + 1, i, 0); // Assuming the ID is in column 0, and it starts from 1
            }
            lastOrderNumber--;
            
            // Recalculate total price after removing the row
            float total = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int rowQuantity = Integer.parseInt((String) model.getValueAt(i, 3));
                float rowPrice = Float.parseFloat((String) model.getValueAt(i, 2));
                total += rowQuantity * rowPrice;
            }
            totalPrice -= deletedRowTotalPrice; // Subtract the price of the deleted dish
            lblTotalPrice.setText("Total Price: " + String.valueOf(totalPrice));
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    public void jButtonBackActionPerformed(ActionEvent e) {
		
    	if (SignInPage.user() == 1) {
    		if (optionsAdmin == null) {
    			optionsAdmin = new OptionsAdmin(); 
            }
    		optionsAdmin.setVisible(true); 
            dispose();
    	} else {
    		if (optionsDiner == null) {
        		optionsDiner = new OptionsDiner(); 
            }
        	optionsDiner.setVisible(true); 
            dispose();
    	}
    	
	}
    
    private static OptionsDiner optionsDiner;
    private static OptionsAdmin optionsAdmin;
    private int generatedcode;
   	private float totalPrice = 0;
   	private int lastOrderNumber = 0;
    private JButton jButtonConfirm;
    private JButton jButtonCancel;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabelOrderNumber;
    private JPanel SidePanel1;
    private JPanel SidePanel2;
    private JPanel MenuHolder;
    private JButton jButtonAppetizers;
    private JButton jButtonEntree;
    private JButton jButtonDesserts;
    private JButton jButtonDrinks;
    private JLabel lblNewLabel;
    private JLabel lblNumber;
    private JPanel panelData_1;
    private JLabel lblDishPhoto_1;
    private JLabel lblDishName_1;
    private JLabel lblDescription_1;
    private JLabel lblPrice_1;
    private JPanel panelData_2;
    private JLabel lblDishPhoto_2;
    private JLabel lblDishName_2;
    private JLabel lblDescription_2;
    private JLabel lblPrice_2;
    private JPanel panelData_3;
    private JLabel lblDishPhoto_3;
    private JLabel lblDishName_3;
    private JLabel lblPrice_3;
    private JLabel lblDescription_3;
    private JPanel panelData_4;
    private JLabel lblDishPhoto_4;
    private JLabel lblDishName_4;
    private JLabel lblPrice_4;
    private JLabel lblDescription_4;
    private JPanel panelData_5;
    private JLabel lblDishPhoto_5;
    private JLabel lblDishName_5;
    private JLabel lblPrice_5;
    private JLabel lblDescription_5;
    private JPanel panelData_6;
    private JLabel lblDishPhoto_6;
    private JLabel lblDishName_6;
    private JLabel lblPrice_6;
    private JLabel lblDescription_6;
    private JPanel panelData_7;
    private JLabel lblDishPhoto_7;
    private JLabel lblDishName_7;
    private JLabel lblPrice_7;
    private JLabel lblDescription_7;
    private JPanel panelData_8;
    private JLabel lblDishPhoto_8;
    private JLabel lblDishName_8;
    private JLabel lblPrice_8;
    private JLabel lblDescription_8;
    private JPanel panelData_9;
    private JLabel lblDishPhoto_9;
    private JLabel lblDishName_9;
    private JLabel lblPrice_9;
    private JLabel lblDescription_9;
    private JLabel lblNewLabel_2;
    private JTable table;
    private DefaultTableModel model;
    private JScrollPane scrollPane;
    private JButton btnOrderAdd_1; 
    private final Object[] row = new Object[4];
    private int dishCount = 0;
    private JButton btnOrderAdd_9;
	private JButton btnOrderAdd_8;
	private JButton btnOrderAdd_7;
	private JButton btnOrderAdd_6;
	private JButton btnOrderAdd_5;
	private JButton btnOrderAdd_4;
	private JButton btnOrderAdd_3;
	private JButton btnOrderAdd_2;
	private int pressedCount = 0;
	private int code;
	private JLabel lblTotalPrice;
	private JButton jButtonDrinks_1;
}
