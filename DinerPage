package BonAppetit;

import java.util.Random;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Dimension;
import javax.swing.plaf.basic.BasicButtonUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import java.awt.Rectangle;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Color;

import javax.swing.ImageIcon;
import javax.swing.JButton;

import java.awt.FlowLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;

public class DinerPage extends javax.swing.JFrame {
	
	
	
	private static final long serialVersionUID = 1L;

    public DinerPage() {
        getContentPane().setBackground(new Color(21, 25, 28));
        setPreferredSize(new Dimension(1920, 1080));
        setExtendedState(Frame.MAXIMIZED_BOTH);
        setUndecorated(true);
        connect();

        initComponents();

        JButton[] btns = { jButtonAppetizers, jButtonEntree, jButtonDesserts, jButtonDrinks, jButtonConfirm, jButtonCancel};
        for (JButton btn : btns) {
            btn.setBackground(new Color(0, 0, 0));
            btn.setUI(new BasicButtonUI());
        }

    }

	Connection con;
	PreparedStatement pst;
	ResultSet rs;
	ResultSet countResult;
	
	
	
    public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bon_appetit", "root", "");
		}
		
		catch (ClassNotFoundException ex) {
			
		}
		
		catch (SQLException ex) {
			
		}
	}
    
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        SidePanel1 = new javax.swing.JPanel();
        SidePanel1.setBackground(new Color(0, 0, 0));
        SidePanel1.setBounds(new Rectangle(0, 11, 103, 1058));
        SidePanel2 = new javax.swing.JPanel();
        SidePanel2.setBounds(1436, 11, 484, 1058);
        SidePanel2.setBackground(new Color(0, 0, 0));
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setBounds(45, 11, 387, 67);
        jLabel3.setForeground(new Color(255, 255, 255));
        jButtonConfirm = new javax.swing.JButton();
        jButtonConfirm.setBackground(new Color(0, 0, 0));
        jButtonConfirm.setIcon(new ImageIcon(DinerPage.class.getResource("/images/confirm.png")));
        jButtonConfirm.setAlignmentX(Component.CENTER_ALIGNMENT);
        jButtonConfirm.setPreferredSize(new Dimension(64, 64));
        jButtonConfirm.setBounds(153, 959, 64, 64);
        jButtonConfirm.setFont(new Font("Century Gothic", Font.PLAIN, 10));
        jButtonCancel = new javax.swing.JButton();
        jButtonCancel.setBackground(new Color(0, 0, 0));
        jButtonCancel.setIcon(new ImageIcon(DinerPage.class.getResource("/images/cancel.png")));
        jButtonCancel.setAlignmentX(Component.CENTER_ALIGNMENT);
        jButtonCancel.setBounds(287, 959, 64, 64);
        jButtonCancel.setFont(new Font("Century Gothic", Font.PLAIN, 10));
        jLabelOrderNumber = new javax.swing.JLabel();
        jLabelOrderNumber.setBounds(23, 890, 441, 35);
        jLabelOrderNumber.setForeground(new Color(255, 255, 255));
        jPanel4 = new javax.swing.JPanel();
        jPanel4.setBounds(109, 11, 1321, 1058);

        jLabel4.setFont(new java.awt.Font("French Script MT", 0, 24)); 
        jLabel4.setText("Your Order Number:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new Font("Century Gothic", Font.PLAIN, 45)); 
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Order Summary");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabelOrderNumber.setFont(new Font("Century Gothic", Font.PLAIN, 24)); 
        jLabelOrderNumber.setText("Your Order Number:");

        jPanel4.setBackground(new Color(0, 0, 0));
        jPanel4.setPreferredSize(new java.awt.Dimension(538, 0));
        
        panelData_1 = new JPanel();
        panelData_1.setBackground(new Color(64, 64, 64));
        panelData_1.setBounds(47, 79, 327, 251);
        panelData_1.setLayout(null);
        panelData_1.setVisible(false);
        jPanel4.setLayout(null);
        jPanel4.add(panelData_1);
        
        btnOrderAdd_1 = new JButton("  Add");
        btnOrderAdd_1.setBackground(new Color(64, 64, 64));
        btnOrderAdd_1.setForeground(new Color(255, 255, 255));
        btnOrderAdd_1.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		
        		jAddButtonActionPerformed(e, lblDishName_1,lblPrice_1);
        	
        	}
        });
        btnOrderAdd_1.setBounds(188, 105, 96, 38);
        panelData_1.add(btnOrderAdd_1);
        
        lblDishPhoto_1 = new JLabel("");
        lblDishPhoto_1.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_1.setBounds(11, 11, 150, 150);
        panelData_1.add(lblDishPhoto_1);
        
        lblDishName_1 = new JLabel("New label");
        lblDishName_1.setForeground(new Color(255, 255, 255));
        lblDishName_1.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_1.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_1.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_1.setBounds(160, 11, 157, 50);
        panelData_1.add(lblDishName_1);
        
        lblPrice_1 = new JLabel("New label");
        lblPrice_1.setForeground(new Color(255, 255, 255));
        lblPrice_1.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_1.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_1.setBounds(160, 71, 157, 23);
        panelData_1.add(lblPrice_1);
        
        lblDescription_1 = new JLabel("New label");
        lblDescription_1.setForeground(new Color(255, 255, 255));
        lblDescription_1.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_1.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_1.setBounds(10, 169, 307, 71);
        panelData_1.add(lblDescription_1);
        
        lblNewLabel_1 = new JLabel("MENU");
        lblNewLabel_1.setForeground(Color.LIGHT_GRAY);
        lblNewLabel_1.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblNewLabel_1.setBounds(261, 99, 56, 26);
        panelData_1.add(lblNewLabel_1);
        
        panelData_2 = new JPanel();
        panelData_2.setBackground(new Color(64, 64, 64));
        panelData_2.setBounds(491, 79, 327, 251);
        jPanel4.add(panelData_2);
        panelData_2.setLayout(null);
        panelData_2.setVisible(false);
        
        btnOrderAdd_2 = new JButton("  Add");
        btnOrderAdd_2.setForeground(new Color(255, 255, 255));
        btnOrderAdd_2.setBackground(new Color(64, 64, 64));
        btnOrderAdd_2.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_2.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_2,lblPrice_2);
        		
        	}
        });
        btnOrderAdd_2.setBounds(188, 105, 96, 38);
        panelData_2.add(btnOrderAdd_2);
        
        lblDishPhoto_2 = new JLabel("");
        lblDishPhoto_2.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_2.setBounds(11, 11, 150, 150);
        panelData_2.add(lblDishPhoto_2);
        
        lblDishName_2 = new JLabel("New label");
        lblDishName_2.setForeground(new Color(255, 255, 255));
        lblDishName_2.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_2.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_2.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_2.setBounds(160, 11, 157, 50);
        panelData_2.add(lblDishName_2);
        
        lblPrice_2 = new JLabel("New label");
        lblPrice_2.setForeground(new Color(255, 255, 255));
        lblPrice_2.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_2.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_2.setBounds(160, 71, 157, 23);
        panelData_2.add(lblPrice_2);
        
        lblDescription_2 = new JLabel("New label");
        lblDescription_2.setForeground(new Color(255, 255, 255));
        lblDescription_2.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_2.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_2.setBounds(10, 169, 307, 71);
        panelData_2.add(lblDescription_2);
        
        panelData_3 = new JPanel();
        panelData_3.setBackground(new Color(64, 64, 64));
        panelData_3.setBounds(933, 79, 327, 251);
        jPanel4.add(panelData_3);
        panelData_3.setLayout(null);
        panelData_3.setVisible(false);
        
        btnOrderAdd_3 = new JButton("  Add");
        btnOrderAdd_3.setForeground(new Color(255, 255, 255));
        btnOrderAdd_3.setBackground(new Color(64, 64, 64));
        btnOrderAdd_3.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_3.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_3,lblPrice_3);
        	}
        });
        btnOrderAdd_3.setBounds(188, 105, 96, 38);
        panelData_3.add(btnOrderAdd_3);
        
        lblDishPhoto_3 = new JLabel("");
        lblDishPhoto_3.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_3.setBounds(11, 11, 150, 150);
        panelData_3.add(lblDishPhoto_3);
        
        lblDishName_3 = new JLabel("New label");
        lblDishName_3.setForeground(new Color(255, 255, 255));
        lblDishName_3.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_3.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_3.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_3.setBounds(160, 11, 157, 50);
        panelData_3.add(lblDishName_3);
        
        lblPrice_3 = new JLabel("New label");
        lblPrice_3.setForeground(new Color(255, 255, 255));
        lblPrice_3.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_3.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_3.setBounds(160, 71, 157, 23);
        panelData_3.add(lblPrice_3);
        
        lblDescription_3 = new JLabel("New label");
        lblDescription_3.setForeground(new Color(255, 255, 255));
        lblDescription_3.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_3.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_3.setBounds(10, 169, 307, 71);
        panelData_3.add(lblDescription_3);
        
        panelData_4 = new JPanel();
        panelData_4.setBackground(new Color(64, 64, 64));
        panelData_4.setLayout(null);
        panelData_4.setBounds(47, 391, 327, 251);
        jPanel4.add(panelData_4);
        panelData_4.setVisible(false);
        
        btnOrderAdd_4 = new JButton("  Add");
        btnOrderAdd_4.setForeground(new Color(255, 255, 255));
        btnOrderAdd_4.setBackground(new Color(64, 64, 64));
        btnOrderAdd_4.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_4.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_4,lblPrice_4);
        	}
        });
        btnOrderAdd_4.setBounds(188, 105, 96, 38);
        panelData_4.add(btnOrderAdd_4);
        
        lblDishPhoto_4 = new JLabel("");
        lblDishPhoto_4.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_4.setBounds(11, 11, 150, 150);
        panelData_4.add(lblDishPhoto_4);
        
        lblDishName_4 = new JLabel("New label");
        lblDishName_4.setForeground(new Color(255, 255, 255));
        lblDishName_4.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_4.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_4.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_4.setBounds(160, 11, 157, 50);
        panelData_4.add(lblDishName_4);
        
        lblPrice_4 = new JLabel("New label");
        lblPrice_4.setForeground(new Color(255, 255, 255));
        lblPrice_4.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_4.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_4.setBounds(160, 71, 157, 23);
        panelData_4.add(lblPrice_4);
        
        lblDescription_4 = new JLabel("New label");
        lblDescription_4.setForeground(new Color(255, 255, 255));
        lblDescription_4.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_4.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_4.setBounds(10, 169, 307, 71);
        panelData_4.add(lblDescription_4);
        
        panelData_5 = new JPanel();
        panelData_5.setBackground(new Color(64, 64, 64));
        panelData_5.setLayout(null);
        panelData_5.setBounds(491, 391, 327, 251);
        jPanel4.add(panelData_5);
        panelData_5.setVisible(false);
        
        btnOrderAdd_5 = new JButton("  Add");
        btnOrderAdd_5.setForeground(new Color(255, 255, 255));
        btnOrderAdd_5.setBackground(new Color(64, 64, 64));
        btnOrderAdd_5.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_5.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_5,lblPrice_5);
        	}
        });
        btnOrderAdd_5.setBounds(188, 105, 96, 38);
        panelData_5.add(btnOrderAdd_5);
        
        lblDishPhoto_5 = new JLabel("");
        lblDishPhoto_5.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_5.setBounds(11, 11, 150, 150);
        panelData_5.add(lblDishPhoto_5);
        
        lblDishName_5 = new JLabel("New label");
        lblDishName_5.setForeground(new Color(255, 255, 255));
        lblDishName_5.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_5.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_5.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_5.setBounds(160, 11, 157, 50);
        panelData_5.add(lblDishName_5);
        
        lblPrice_5 = new JLabel("New label");
        lblPrice_5.setForeground(new Color(255, 255, 255));
        lblPrice_5.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_5.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_5.setBounds(160, 72, 157, 23);
        panelData_5.add(lblPrice_5);
        
        lblDescription_5 = new JLabel("New label");
        lblDescription_5.setForeground(new Color(255, 255, 255));
        lblDescription_5.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_5.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_5.setBounds(10, 169, 307, 71);
        panelData_5.add(lblDescription_5);
        
        panelData_6 = new JPanel();
        panelData_6.setBackground(new Color(64, 64, 64));
        panelData_6.setLayout(null);
        panelData_6.setBounds(933, 391, 327, 251);
        jPanel4.add(panelData_6);
        panelData_6.setVisible(false);
        
        btnOrderAdd_6 = new JButton("  Add");
        btnOrderAdd_6.setForeground(new Color(255, 255, 255));
        btnOrderAdd_6.setBackground(new Color(64, 64, 64));
        btnOrderAdd_6.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_6.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_6,lblPrice_6);
        	}
        });
        btnOrderAdd_6.setBounds(188, 105, 96, 38);
        panelData_6.add(btnOrderAdd_6);
        
        lblDishPhoto_6 = new JLabel("");
        lblDishPhoto_6.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_6.setBounds(11, 11, 150, 150);
        panelData_6.add(lblDishPhoto_6);
        
        lblDishName_6 = new JLabel("New label");
        lblDishName_6.setForeground(new Color(255, 255, 255));
        lblDishName_6.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_6.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_6.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_6.setBounds(160, 11, 157, 50);
        panelData_6.add(lblDishName_6);
        
        lblPrice_6 = new JLabel("New label");
        lblPrice_6.setForeground(new Color(255, 255, 255));
        lblPrice_6.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_6.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_6.setBounds(160, 71, 157, 23);
        panelData_6.add(lblPrice_6);
        
        lblDescription_6 = new JLabel("New label");
        lblDescription_6.setForeground(new Color(255, 255, 255));
        lblDescription_6.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_6.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_6.setBounds(10, 169, 307, 71);
        panelData_6.add(lblDescription_6);
        
        panelData_7 = new JPanel();
        panelData_7.setBackground(new Color(64, 64, 64));
        panelData_7.setLayout(null);
        panelData_7.setBounds(47, 704, 327, 251);
        jPanel4.add(panelData_7);
        panelData_7.setVisible(false);
        
        btnOrderAdd_7 = new JButton("  Add");
        btnOrderAdd_7.setForeground(new Color(255, 255, 255));
        btnOrderAdd_7.setBackground(new Color(64, 64, 64));
        btnOrderAdd_7.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_7.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_7,lblPrice_7);
        	}
        });
        btnOrderAdd_7.setBounds(188, 105, 96, 38);
        panelData_7.add(btnOrderAdd_7);
        
        lblDishPhoto_7 = new JLabel("");
        lblDishPhoto_7.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_7.setBounds(11, 11, 150, 150);
        panelData_7.add(lblDishPhoto_7);
        
        lblDishName_7 = new JLabel("New label");
        lblDishName_7.setForeground(new Color(255, 255, 255));
        lblDishName_7.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_7.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_7.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_7.setBounds(160, 11, 157, 50);
        panelData_7.add(lblDishName_7);
        
        lblPrice_7 = new JLabel("New label");
        lblPrice_7.setForeground(new Color(255, 255, 255));
        lblPrice_7.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_7.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_7.setBounds(160, 71, 157, 23);
        panelData_7.add(lblPrice_7);
        
        lblDescription_7 = new JLabel("New label");
        lblDescription_7.setForeground(new Color(255, 255, 255));
        lblDescription_7.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_7.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_7.setBounds(10, 169, 307, 71);
        panelData_7.add(lblDescription_7);
        
        panelData_8 = new JPanel();
        panelData_8.setBackground(new Color(64, 64, 64));
        panelData_8.setLayout(null);
        panelData_8.setBounds(491, 704, 327, 251);
        jPanel4.add(panelData_8);
        panelData_8.setVisible(false);
        
        btnOrderAdd_8 = new JButton("  Add");
        btnOrderAdd_8.setForeground(new Color(255, 255, 255));
        btnOrderAdd_8.setBackground(new Color(64, 64, 64));
        btnOrderAdd_8.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_8.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_8,lblPrice_8);
        	}
        });
        btnOrderAdd_8.setBounds(188, 105, 96, 38);
        panelData_8.add(btnOrderAdd_8);
        
        lblDishPhoto_8 = new JLabel("");
        lblDishPhoto_8.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_8.setBounds(11, 11, 150, 150);
        panelData_8.add(lblDishPhoto_8);
        
        lblDishName_8 = new JLabel("New label");
        lblDishName_8.setForeground(new Color(255, 255, 255));
        lblDishName_8.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_8.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_8.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_8.setBounds(160, 11, 157, 50);
        panelData_8.add(lblDishName_8);
        
        lblPrice_8 = new JLabel("New label");
        lblPrice_8.setForeground(new Color(255, 255, 255));
        lblPrice_8.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_8.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_8.setBounds(160, 71, 157, 23);
        panelData_8.add(lblPrice_8);
        
        lblDescription_8 = new JLabel("New label");
        lblDescription_8.setForeground(new Color(255, 255, 255));
        lblDescription_8.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_8.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_8.setBounds(10, 169, 307, 71);
        panelData_8.add(lblDescription_8);
        
        panelData_9 = new JPanel();
        panelData_9.setBackground(new Color(64, 64, 64));
        panelData_9.setLayout(null);
        panelData_9.setBounds(933, 704, 327, 251);
        jPanel4.add(panelData_9);
        panelData_9.setVisible(false);
        
        btnOrderAdd_9 = new JButton("  Add");
        btnOrderAdd_9.setForeground(new Color(255, 255, 255));
        btnOrderAdd_9.setBackground(new Color(64, 64, 64));
        btnOrderAdd_9.setIcon(new ImageIcon(DinerPage.class.getResource("/images/add-order.png")));
        btnOrderAdd_9.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAddButtonActionPerformed(e, lblDishName_9,lblPrice_9);
        	}
        });
        btnOrderAdd_9.setBounds(188, 105, 96, 38);
        panelData_9.add(btnOrderAdd_9);
        
        lblDishPhoto_9 = new JLabel("");
        lblDishPhoto_9.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishPhoto_9.setBounds(11, 11, 150, 150);
        panelData_9.add(lblDishPhoto_9);
        
        lblDishName_9 = new JLabel("New label");
        lblDishName_9.setForeground(new Color(255, 255, 255));
        lblDishName_9.setHorizontalAlignment(SwingConstants.CENTER);
        lblDishName_9.setVerticalAlignment(SwingConstants.TOP);
        lblDishName_9.setFont(new Font("Century Gothic", Font.BOLD, 20));
        lblDishName_9.setBounds(160, 11, 157, 50);
        panelData_9.add(lblDishName_9);
        
        lblPrice_9 = new JLabel("New label");
        lblPrice_9.setForeground(new Color(255, 255, 255));
        lblPrice_9.setHorizontalAlignment(SwingConstants.CENTER);
        lblPrice_9.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        lblPrice_9.setBounds(160, 71, 157, 23);
        panelData_9.add(lblPrice_9);
        
        lblDescription_9 = new JLabel("New label");
        lblDescription_9.setForeground(new Color(255, 255, 255));
        lblDescription_9.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        lblDescription_9.setVerticalAlignment(SwingConstants.TOP);
        lblDescription_9.setBounds(10, 169, 307, 71);
        panelData_9.add(lblDescription_9);
        
        lblNewLabel_2 = new JLabel("");
        lblNewLabel_2.setForeground(new Color(255, 255, 255));
        lblNewLabel_2.setFont(new Font("Tahoma", Font.PLAIN, 18));
        lblNewLabel_2.setBounds(175, 33, 63, 28);
        jPanel4.add(lblNewLabel_2);
        SidePanel2.setLayout(null);
        SidePanel2.add(jButtonConfirm);
        SidePanel2.add(jButtonCancel);
        SidePanel2.add(jLabelOrderNumber);
        SidePanel2.add(jLabel3);
        FlowLayout fl_sidePanel1 = new FlowLayout(FlowLayout.CENTER, 10, 50);
        SidePanel1.setLayout(fl_sidePanel1);
        
        lblNewLabel = new JLabel("MENU");
        lblNewLabel.setForeground(new Color(192, 192, 192));
        lblNewLabel.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        SidePanel1.add(lblNewLabel);

        jButtonAppetizers = new JButton("");
        jButtonAppetizers.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jAppetizerButtonActionPerformed(e);
        	}
        });
        jButtonAppetizers.setBackground(new Color(0, 0, 0));
        jButtonAppetizers.setIcon(new ImageIcon(DinerPage.class.getResource("/images/nachos.png")));
        jButtonAppetizers.setPreferredSize(new Dimension(64, 64));
        jButtonAppetizers.setBounds(new Rectangle(0, 0, 100, 100));
        SidePanel1.add(jButtonAppetizers);

        jButtonEntree = new JButton("");
        jButtonEntree.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jEntreeButtonActionPerformed(e);
        	}
        });
        
        lblAppetizers = new JLabel("Appetizers");
        lblAppetizers.setForeground(new Color(192, 192, 192));
        lblAppetizers.setFont(new Font("Century Gothic", Font.PLAIN, 18));
        SidePanel1.add(lblAppetizers);
        jButtonEntree.setBackground(new Color(0, 0, 0));
        jButtonEntree.setIcon(new ImageIcon(DinerPage.class.getResource("/images/Entree.png")));
        jButtonEntree.setPreferredSize(new Dimension(64, 64));
        jButtonEntree.setBounds(new Rectangle(0, 0, 64, 64));
        SidePanel1.add(jButtonEntree);

        jButtonDesserts = new JButton("");
        jButtonDesserts.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jDessertButtonActionPerformed(e);
        	}
        });
        
        lblEntree = new JLabel("Entree");
        lblEntree.setForeground(Color.LIGHT_GRAY);
        lblEntree.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        SidePanel1.add(lblEntree);
        jButtonDesserts.setBackground(new Color(0, 0, 0));
        jButtonDesserts.setIcon(new ImageIcon(DinerPage.class.getResource("/images/dessert.png")));
        jButtonDesserts.setPreferredSize(new Dimension(64, 64));
        jButtonDesserts.setBounds(new Rectangle(0, 0, 64, 64));
        SidePanel1.add(jButtonDesserts);

        jButtonDrinks = new JButton("");
        jButtonDrinks.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jDrinksButtonActionPerformed(e);
        	}
        });
        getContentPane().setLayout(null);
        
        lblDessert = new JLabel("Dessert");
        lblDessert.setForeground(Color.LIGHT_GRAY);
        lblDessert.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        SidePanel1.add(lblDessert);
        jButtonDrinks.setBackground(new Color(0, 0, 0));
        jButtonDrinks.setIcon(new ImageIcon(DinerPage.class.getResource("/images/drinks.png")));
        jButtonDrinks.setPreferredSize(new Dimension(64, 64));
        jButtonDrinks.setBounds(new Rectangle(0, 0, 64, 64));
        SidePanel1.add(jButtonDrinks);
        getContentPane().add(SidePanel1);
        
        jButtonDrinks_1 = new JButton("");
        jButtonDrinks_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		jButtonBackActionPerformed(e);
        	}
        });
        
        lblDrinks = new JLabel("Drinks");
        lblDrinks.setForeground(Color.LIGHT_GRAY);
        lblDrinks.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        SidePanel1.add(lblDrinks);
        jButtonDrinks_1.setIcon(new ImageIcon(DinerPage.class.getResource("/images/left-arrow.png")));
        jButtonDrinks_1.setPreferredSize(new Dimension(64, 64));
        jButtonDrinks_1.setBounds(new Rectangle(0, 0, 64, 64));
        jButtonDrinks_1.setBackground(Color.BLACK);
        SidePanel1.add(jButtonDrinks_1);
        
        lblBack = new JLabel("Back");
        lblBack.setForeground(Color.LIGHT_GRAY);
        lblBack.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        SidePanel1.add(lblBack);
        getContentPane().add(jPanel4);
        getContentPane().add(SidePanel2);
        
        	
        
        
        lblTotalPrice = new JLabel();
        lblTotalPrice.setText("Total Price:");
        lblTotalPrice.setForeground(Color.WHITE);
        lblTotalPrice.setFont(new Font("Century Gothic", Font.PLAIN, 24));
        lblTotalPrice.setBounds(134, 796, 317, 35);
        SidePanel2.add(lblTotalPrice);
        
        JLabel lblBackground = new JLabel("");
        lblBackground.setIcon(new ImageIcon(DinerPage.class.getResource("/images/mainBG.png")));
        lblBackground.setBounds(0, 0, 1920, 1080);
        getContentPane().add(lblBackground);

        
        scrollPane = new JScrollPane();
        scrollPane.setEnabled(false);
        scrollPane.getViewport().setBackground(new Color(64, 64, 64)); 
        scrollPane.setBounds(10, 77, 464, 549);
        SidePanel2.add(scrollPane);

        table = new JTable();
        table.setBackground(new Color(64, 64, 64));
        table.setForeground(Color.WHITE);
        table.setName("");
        model = new DefaultTableModel();
        Object[] column = {"ID", "Name", "Price", "No."};
        model.setColumnIdentifiers(column);
        table.setModel(model);
        table.setRowHeight(30);
        scrollPane.setViewportView(table);
        table.setRowHeight(50);

        table.getColumnModel().getColumn(0).setPreferredWidth(30); 
        table.getColumnModel().getColumn(1).setPreferredWidth(180); 
        table.getColumnModel().getColumn(2).setPreferredWidth(80); 
        table.getColumnModel().getColumn(3).setPreferredWidth(30); 

        centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); 
        table.getColumnModel().getColumn(1).setCellRenderer(centerRenderer); 
        table.getColumnModel().getColumn(2).setCellRenderer(centerRenderer); 
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer); 

        tableHeader = table.getTableHeader();
        tableHeader.setFont(new Font("Century Gothic", Font.BOLD, 18));
        tableHeader.setBackground(new Color(64, 64, 64)); 

        renderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);

        table.setFont(new Font("Century Gothic", Font.PLAIN, 12));

        table.setOpaque(true);

		
		btnEditQuantity = new JButton("Edit Quantity");
		btnEditQuantity.setForeground(new Color(255, 255, 255));
		btnEditQuantity.setFont(new Font("Century Gothic", Font.PLAIN, 20));
		btnEditQuantity.setBackground(new Color(64, 64, 64));
		btnEditQuantity.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				editQuantity();
			}
		});
		btnEditQuantity.setBounds(23, 712, 181, 35);
		SidePanel2.add(btnEditQuantity);
		
		btnDeleteRow = new JButton("Delete Order");
		btnDeleteRow.setForeground(new Color(255, 255, 255));
		btnDeleteRow.setFont(new Font("Century Gothic", Font.PLAIN, 20));
		btnDeleteRow.setBackground(new Color(64, 64, 64));
		btnDeleteRow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteSelectedRow();
			}
		});
		btnDeleteRow.setBounds(239, 712, 181, 35);
		SidePanel2.add(btnDeleteRow);
		
		spinner = new JSpinner();
		spinner.setBounds(170, 712, 72, 35);
		
		
		btnPreviousPage = new JButton("<");
		btnPreviousPage.setForeground(new Color(255, 255, 255));
		btnPreviousPage.setFont(new Font("Century Gothic", Font.PLAIN, 20));
		btnPreviousPage.setBackground(new Color(64, 64, 64));
        btnPreviousPage.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        	}
        });
        btnPreviousPage.setBounds(415, 1001, 89, 30);
        
        jPanel4.add(btnPreviousPage);
        
        btnNextPage = new JButton(">");
        btnNextPage.setForeground(new Color(255, 255, 255));
        btnNextPage.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        btnNextPage.setBackground(new Color(64, 64, 64));
        btnNextPage.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        	}
        });
        btnNextPage.setBounds(610, 1001, 89, 30);
        jPanel4.add(btnNextPage);
        
        txtPageNumber = new JTextField();
        txtPageNumber.setForeground(new Color(255, 255, 255));
        txtPageNumber.setFont(new Font("Century Gothic", Font.PLAIN, 20));
        txtPageNumber.setBackground(new Color(64, 64, 64));
        txtPageNumber.setHorizontalAlignment(SwingConstants.CENTER);
        txtPageNumber.setText("0");
        txtPageNumber.setBounds(514, 1002, 86, 29);
        jPanel4.add(txtPageNumber);
        txtPageNumber.setColumns(10);
        
        JLabel lblDinerMenu = new JLabel("Diner Menu");
        lblDinerMenu.setForeground(Color.LIGHT_GRAY);
        lblDinerMenu.setFont(new Font("Century Gothic", Font.BOLD, 38));
        lblDinerMenu.setBounds(10, 11, 307, 43);
        jPanel4.add(lblDinerMenu);
		
        btnPreviousPage.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (currentPage > 0) {
                    currentPage--;
                    menuPrinter(currentOption, currentPage); 
                } else {
                    JOptionPane.showMessageDialog(null, "You have reached the first page.");
                }
            }
        });

        btnNextPage.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int totalPages = getTotalPages(currentOption); 
                if (currentPage < totalPages - 1) {
                    currentPage++;
                    menuPrinter(currentOption, currentPage); 
                } else {
                    JOptionPane.showMessageDialog(null, "You have reached the last page.");
                }
            }
        });

        pack();
    }

   

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {
        if (table != null && table.getRowCount() > 0 && table.getColumnCount() > 1) { 
            if (generatedcode == 0) {
                generatedcode = generateRandomCode();
            }
            jLabelOrderNumber.setText("Your Order Number: " + generatedcode);
            
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    OrderNumbersDiner orderNumbersDiner = new OrderNumbersDiner();
                    orderNumbersDiner.textFieldOrderNumber.setText(String.valueOf(generatedcode));
                    orderNumbersDiner.searchOrderStatus(); 
                    orderNumbersDiner.setVisible(true);
                }
            });
        } else {
            JOptionPane.showMessageDialog(this, "Add a dish first", "Warning", JOptionPane.WARNING_MESSAGE); 
        }

        panelData_1.setVisible(false);
        panelData_2.setVisible(false);
        panelData_3.setVisible(false);
        panelData_4.setVisible(false);
        panelData_5.setVisible(false);
        panelData_6.setVisible(false);
        panelData_7.setVisible(false);
        panelData_8.setVisible(false);
        panelData_9.setVisible(false);
        
        this.dispose();
    }
    
    private int getTotalPages(String option) {
	    try {
	        pst = con.prepareStatement("SELECT COUNT(*) FROM " + option);
	        countResult = pst.executeQuery();
	        countResult.next();
	        int totalRows = countResult.getInt(1); 
	        return (int) Math.ceil((double) totalRows / PAGE_SIZE);
	    } catch (SQLException ex) {
	        ex.printStackTrace();
	    }
	    return 0;
	}



    
    private int generateRandomCode() {
        Random random = new Random();
        
        if (pressedCount == 0) {
        	code = random.nextInt(90000) + 10000;
        }
        
        return code; 
       
    }
    
    
    
    public static void main(String args[]) {
    	
    	SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new OptionsDiner().setVisible(false); 
            }
        });
    	
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DinerPage.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DinerPage().setVisible(true);
            }
        });
    }
    
    public void actionBackPerformed(ActionEvent e){
		OptionsAdmin optionsAdmin = new OptionsAdmin();
		optionsAdmin.setVisible(true);
		this.dispose();
	}
	
	public void jAppetizerButtonActionPerformed(ActionEvent e) {
	    refreshPrint();
	    currentOption = "appetizer";
	    currentPage = 0; 
	    menuPrinter(currentOption, currentPage);
	}

	public void jEntreeButtonActionPerformed(ActionEvent e) {
	    refreshPrint();
	    currentOption = "entree";
	    currentPage = 0; 
	    menuPrinter(currentOption, currentPage);
	}

	public void jDessertButtonActionPerformed(ActionEvent e) {
	    refreshPrint();
	    currentOption = "dessert";
	    currentPage = 0; 
	    menuPrinter(currentOption, currentPage);
	}
	
	public void jDrinksButtonActionPerformed(ActionEvent e) {
	    refreshPrint();
	    currentOption = "drinks";
	    currentPage = 0; 
	    menuPrinter(currentOption, currentPage);
	}

    
	public void menuPrinter(String option, int page) {
	    String dishName, description, price;
	    try {
	        pst = con.prepareStatement("SELECT COUNT(*) FROM " + option);
	        countResult = pst.executeQuery();
	        countResult.next();
	        int totalRows = countResult.getInt(1); 
	        
	        int offset = page * PAGE_SIZE;

	        pst = con.prepareStatement("SELECT dish_name, description, price, image FROM " + option + " LIMIT ? OFFSET ?");
	        pst.setInt(1, PAGE_SIZE);
	        pst.setInt(2, offset);
	        rs = pst.executeQuery();

	        for (int i = 1; i <= PAGE_SIZE; i++) {
	            getPanelData(i).setVisible(false);
	        }

	        int count = 0;
	        while (rs.next() && count < PAGE_SIZE) {
	            dishName = rs.getString("dish_name");
	            description = rs.getString("description");
	            price = rs.getString("price");

	            Blob imageBlob = rs.getBlob("image");
	            byte[] imageBytes = imageBlob.getBytes(1, (int) imageBlob.length());
	            ImageIcon imageIcon = new ImageIcon(imageBytes);
	            Image img = imageIcon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);

	            getLabelDishName(count + 1).setText(formatText(dishName, getLabelDishName(count + 1).getFont(), 145));
	            getLabelDescription(count + 1).setText(formatText(description, getLabelDescription(count + 1).getFont(), 280));
	            getLabelPrice(count + 1).setText("Php " + price + "0");
	            getPanelData(count + 1).setVisible(true);
	            getLabelDishPhoto(count + 1).setIcon(new ImageIcon(img));
	            count++;
	        }
	        
	        txtPageNumber.setText(Integer.toString(page + 1));
	    } catch (SQLException ex) {
	        ex.printStackTrace();
	    }
	}

	private JPanel getPanelData(int index) {
	    switch (index) {
	        case 1: return panelData_1;
	        case 2: return panelData_2;
	        case 3: return panelData_3;
	        case 4: return panelData_4;
	        case 5: return panelData_5;
	        case 6: return panelData_6;
	        case 7: return panelData_7;
	        case 8: return panelData_8;
	        case 9: return panelData_9;
	        default: return null;
	    }
	}

	private JLabel getLabelDishName(int index) {
	    switch (index) {
	        case 1: return lblDishName_1;
	        case 2: return lblDishName_2;
	        case 3: return lblDishName_3;
	        case 4: return lblDishName_4;
	        case 5: return lblDishName_5;
	        case 6: return lblDishName_6;
	        case 7: return lblDishName_7;
	        case 8: return lblDishName_8;
	        case 9: return lblDishName_9;
	        default: return null;
	    }
	}

	private JLabel getLabelDescription(int index) {
	    switch (index) {
	        case 1: return lblDescription_1;
	        case 2: return lblDescription_2;
	        case 3: return lblDescription_3;
	        case 4: return lblDescription_4;
	        case 5: return lblDescription_5;
	        case 6: return lblDescription_6;
	        case 7: return lblDescription_7;
	        case 8: return lblDescription_8;
	        case 9: return lblDescription_9;
	        default: return null;
	    }
	}

	private JLabel getLabelPrice(int index) {
	    switch (index) {
	        case 1: return lblPrice_1;
	        case 2: return lblPrice_2;
	        case 3: return lblPrice_3;
	        case 4: return lblPrice_4;
	        case 5: return lblPrice_5;
	        case 6: return lblPrice_6;
	        case 7: return lblPrice_7;
	        case 8: return lblPrice_8;
	        case 9: return lblPrice_9;
	        default: return null;
	    }
	}

	private JLabel getLabelDishPhoto(int index) {
	    switch (index) {
	        case 1: return lblDishPhoto_1;
	        case 2: return lblDishPhoto_2;
	        case 3: return lblDishPhoto_3;
	        case 4: return lblDishPhoto_4;
	        case 5: return lblDishPhoto_5;
	        case 6: return lblDishPhoto_6;
	        case 7: return lblDishPhoto_7;
	        case 8: return lblDishPhoto_8;
	        case 9: return lblDishPhoto_9;
	        default: return null;
	    }
	}
    
    private static String formatText(String text, Font font, int width) {
        JLabel tempLabel = new JLabel();
        tempLabel.setFont(font);
        FontMetrics metrics = tempLabel.getFontMetrics(font);

        StringBuilder formattedText = new StringBuilder("<html><body>");
        String[] words = text.split(" ");
        int lineWidth = 0;

        for (String word : words) {
            int wordWidth = metrics.stringWidth(word + " ");
            if (lineWidth + wordWidth > width) {
                formattedText.append("<br>");
                lineWidth = 0;
            }
            formattedText.append(word).append(" ");
            lineWidth += wordWidth;
        }

        formattedText.append("</body></html>");
        return formattedText.toString();
    }
    
    public void refreshPrint() {
    	panelData_1.setVisible(false);
    	panelData_2.setVisible(false);
    	panelData_3.setVisible(false);
    	panelData_4.setVisible(false);
    	panelData_5.setVisible(false);
    	panelData_6.setVisible(false);
    	panelData_7.setVisible(false);
    	panelData_8.setVisible(false);
    	panelData_9.setVisible(false);
    	
    }
    
    public String numberIDChecker() {
        return String.valueOf(++lastOrderNumber);
    }
    
    
    public void jAddButtonActionPerformed(ActionEvent e, JLabel dishName, JLabel dishPrice) {
        System.out.println("Add button clicked");
        String name, price;
        float priceCurrent;

        name = stripHtmlTags(dishName.getText());
        price = stripHtmlTags(dishPrice.getText());

        price = price.replace("Php ", "").trim();

        try {
            priceCurrent = Float.parseFloat(price);

            SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1); 
            JSpinner spinner = new JSpinner(spinnerModel);
            Object[] message = {"Enter the number of orders for " + name + ":", spinner};

            int option = JOptionPane.showConfirmDialog(null, message, "Number of Orders", JOptionPane.OK_CANCEL_OPTION);

            if (option != JOptionPane.OK_OPTION) {
                return;
            }

            int quantity = (int) spinner.getValue();
            float totalPriceChange = priceCurrent * quantity;

            String orderNumber = numberIDChecker();
            String orderCode = String.valueOf(generateRandomCode());

            try {
                float total = 0;
                for (int i = 0; i < model.getRowCount(); i++) {
                    int rowQuantity = Integer.parseInt((String) model.getValueAt(i, 3));
                    float rowPrice = Float.parseFloat((String) model.getValueAt(i, 2));
                    total += rowQuantity * rowPrice;
                }
                total += totalPriceChange;
                float totalPrice = total;

                lblTotalPrice.setText("Total Price: Php " + String.format("%.2f", totalPrice));

                String[] row = new String[4];
                row[0] = orderNumber;
                row[1] = name; 
                row[2] = String.format("%.2f", priceCurrent); 
                row[3] = String.valueOf(quantity);

                pst = con.prepareStatement("INSERT INTO order_cart (order_number, dish_name, price, quantity, order_code, status, remarks, total_price) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                pst.setString(1, orderNumber);
                pst.setString(2, name);
                pst.setString(3, String.format("%.2f", priceCurrent)); 
                pst.setString(4, String.valueOf(quantity));
                pst.setString(5, orderCode);
                pst.setString(6, "Pending");
                pst.setString(7, "Incomplete");
                pst.setString(8, String.format("%.2f", totalPrice)); 
                pst.executeUpdate();

                model.addRow(row);
            } catch (SQLException e1) {
                e1.printStackTrace();
            }

            pressedCount++;
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Invalid price format: " + price, "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private String stripHtmlTags(String text) {
        return text.replaceAll("<[^>]*>", "");
    }



    
    
    private void editQuantity() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 0, 50, 1);
            JSpinner spinner = new JSpinner(spinnerModel);
            spinner.setValue(Integer.parseInt((String) table.getValueAt(selectedRow, 3))); 
            int result = JOptionPane.showConfirmDialog(null, new Object[]{"Edit Quantity:", spinner}, "Edit Quantity", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                int newQuantity = (int) spinner.getValue();
                table.setValueAt(String.valueOf(newQuantity), selectedRow, 3);
                float total = 0;
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    int rowQuantity = Integer.parseInt((String) model.getValueAt(i, 3));
                    float rowPrice = Float.parseFloat((String) model.getValueAt(i, 2));
                    total += rowQuantity * rowPrice;
                }
                lblTotalPrice.setText("Total Price: " + String.valueOf(total));
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }


    private void deleteSelectedRow() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            float deletedRowPrice = Float.parseFloat((String) model.getValueAt(selectedRow, 2)); 
            int deletedRowQuantity = Integer.parseInt((String) model.getValueAt(selectedRow, 3)); 
            float deletedRowTotalPrice = deletedRowPrice * deletedRowQuantity; 
            
            model.removeRow(selectedRow);
            
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(i + 1, i, 0); 
            }
            lastOrderNumber--;
            
            float total = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int rowQuantity = Integer.parseInt((String) model.getValueAt(i, 3));
                float rowPrice = Float.parseFloat((String) model.getValueAt(i, 2));
                total += rowQuantity * rowPrice;
            }
            totalPrice -= deletedRowTotalPrice; 
            lblTotalPrice.setText("Total Price: " + String.valueOf(totalPrice));
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    public void jButtonBackActionPerformed(ActionEvent e) {
		
    	if (SignInPage.user() == 1) {
    		if (optionsAdmin == null) {
    			optionsAdmin = new OptionsAdmin(); 
            }
    		optionsAdmin.setVisible(true); 
            dispose();
    	} else {
    		if (optionsDiner == null) {
        		optionsDiner = new OptionsDiner(); 
            }
        	optionsDiner.setVisible(true); 
            dispose();
    	}
    	
	}
    
    private DefaultTableCellRenderer centerRenderer;
	private JTableHeader tableHeader;
	private DefaultTableCellRenderer renderer;
	private JSpinner spinner;
	private JButton btnDeleteRow;
	private JButton btnEditQuantity;
	private String currentOption;
	private int currentPage = 0;
	private int PAGE_SIZE = 9;
	private JTextField txtPageNumber;
	private JButton btnNextPage;
	private JButton btnPreviousPage;
    private static OptionsDiner optionsDiner;
    private static OptionsAdmin optionsAdmin;
    private int generatedcode;
   	private float totalPrice = 0;
   	private int lastOrderNumber = 0;
    private JButton jButtonConfirm;
    private JButton jButtonCancel;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabelOrderNumber;
    private JPanel SidePanel1;
    private JPanel SidePanel2;
    private JPanel jPanel4;
    private JButton jButtonAppetizers;
    private JButton jButtonEntree;
    private JButton jButtonDesserts;
    private JButton jButtonDrinks;
    private JLabel lblNewLabel;
    private JPanel panelData_1;
    private JLabel lblDishPhoto_1;
    private JLabel lblDishName_1;
    private JLabel lblDescription_1;
    private JLabel lblPrice_1;
    private JPanel panelData_2;
    private JLabel lblDishPhoto_2;
    private JLabel lblDishName_2;
    private JLabel lblDescription_2;
    private JLabel lblPrice_2;
    private JPanel panelData_3;
    private JLabel lblDishPhoto_3;
    private JLabel lblDishName_3;
    private JLabel lblPrice_3;
    private JLabel lblDescription_3;
    private JPanel panelData_4;
    private JLabel lblDishPhoto_4;
    private JLabel lblDishName_4;
    private JLabel lblPrice_4;
    private JLabel lblDescription_4;
    private JPanel panelData_5;
    private JLabel lblDishPhoto_5;
    private JLabel lblDishName_5;
    private JLabel lblPrice_5;
    private JLabel lblDescription_5;
    private JPanel panelData_6;
    private JLabel lblDishPhoto_6;
    private JLabel lblDishName_6;
    private JLabel lblPrice_6;
    private JLabel lblDescription_6;
    private JPanel panelData_7;
    private JLabel lblDishPhoto_7;
    private JLabel lblDishName_7;
    private JLabel lblPrice_7;
    private JLabel lblDescription_7;
    private JPanel panelData_8;
    private JLabel lblDishPhoto_8;
    private JLabel lblDishName_8;
    private JLabel lblPrice_8;
    private JLabel lblDescription_8;
    private JPanel panelData_9;
    private JLabel lblDishPhoto_9;
    private JLabel lblDishName_9;
    private JLabel lblPrice_9;
    private JLabel lblDescription_9;
    private JLabel lblNewLabel_2;
    private JTable table;
    private DefaultTableModel model;
    private JScrollPane scrollPane;
    private JButton btnOrderAdd_1; 
    private JButton btnOrderAdd_9;
	private JButton btnOrderAdd_8;
	private JButton btnOrderAdd_7;
	private JButton btnOrderAdd_6;
	private JButton btnOrderAdd_5;
	private JButton btnOrderAdd_4;
	private JButton btnOrderAdd_3;
	private JButton btnOrderAdd_2;
	private int pressedCount = 0;
	private int code;
	private JLabel lblTotalPrice;
	private JButton jButtonDrinks_1;
	private JLabel lblAppetizers;
	private JLabel lblEntree;
	private JLabel lblDessert;
	private JLabel lblDrinks;
	private JLabel lblBack;
	private JLabel lblNewLabel_1;
}
